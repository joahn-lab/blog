build_site()
library(blogdown)
build_site()
serve_site()
serve_site()
serve_site()
new_content()
new_post()
new_post(title = "SOTU text analysis")
getwd()
serve_site()
build_site()
head(stu)
?knitr::knit
2: In file(file, "rt")
build_site()
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
build_site()
build_site()
build_site()
serve_site()
---
site: blogdown:::blogdown_site
---
library(blogdown)
library(blogdown)
build_site()
build_site()
serve_site()
serve_site()
serve_site()
build_site()
library(blogdown)
blogdown::new_post()
blogdown::new_post("Presidential excitable speech analysis")
serve_site()
build_site()
library(tidyverse)
library(extrafont)
font_import(pattern = "Nanum")
library(blogdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
serve_site()
library(blogdown)
build_site()
build_site()
serve_site()
serve_site()
serve_site()
build_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
serve_site()
build_site()
library(blogdown)
serve_site()
source('~/.active-rstudio-document', echo=TRUE)
serve_site()
blogdown::build_site()
blogdown::install_hugo()
blogdown::build_site()
blogdown::serve_site()
getwd()
mylocation = "C:/Users/chchc/Desktop/2020-1"
setwd(mylocation)
library(tidyverse)
library(httr)
library(XML)
library(xml2)
library(writexl)
library(tictoc)
# 응급의료기관 기본정보 조회 서비스
url = "http://openapi.seoul.go.kr:8088/684c556e6a63686338334675524e4c/xml/ListNecessariesPricesService"
result_table_1 = tibble()
queryParams = str_c("/1", "/2058")
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
rootNode
queryParams = str_c("/1", "/1000")
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
rootNode
rootNode
names = rootNode[['ListNecessariesPricesService']][['row']] %>%
names()
names
rootNode[['ListNecessariesPricesService']][['row']]
rootNode[[2]][['ListNecessariesPricesService']][['row']] %>%
names()
rootNode[['ListNecessariesPricesService']]
rootNode
xmlToDataFrame(nodes = getNodeSet(rootNode))
xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME'))
rootNode = xmlRoot(doc)
rootNode
?bind_rows
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME')) %>% as_tibble()
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT')) %>% as_tibble()
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl8 = do.call(bind_cols, mget(paste0("tbl",1:7))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8)
tbl1
tbl3
tbl4
xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'))
rootNode
xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'))
?xmlToDataFrame
xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = FALSE)
xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble()
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble()
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl8 = do.call(bind_cols, mget(paste0("tbl",1:7))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8)
do.call(bind_cols, mget(paste0("tbl",1:7)))
?as_tibble
result_table_1 = tibble()
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl8 = do.call(bind_cols, mget(paste0("tbl",1:7))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8)
result_table_1
result_table_1 = tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8) %>% as_tibble(.name_repair = "minimal")
result_table_1
result_table_1 = tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8) %>% as_tibble(.name_repair = "universal")
result_table_1
result_table_1 = tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl8) %>% as_tibble(.name_repair = "check_unique")
result_table_1
?colnames
m2 <- cbind(1, 1:4)
colnames(m2, do.NULL = FALSE)
colnames(m2) <- c("x","Y")
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "Obs.")
m2
rootNode
getNodeSet(rootNode, '/list_total_count')
getNodeSet(rootNode, '//list_total_count')
xml_find_num(rootNode, '//list_total_count')
xml_find_all(rootNode, '//list_total_count')
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))[1]
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))[[1]]
as.numeric(xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))[[1]])
as.numeric(xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))[1])
as.numeric(xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')))
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))
as.integer(xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')))
xmlToList(nodes = getNodeSet(rootNode, '//list_total_count')))
xmlToList(nodes = getNodeSet(rootNode, '//list_total_count'))
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')$text
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')[1,1]
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))[1,1]
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))$text
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as.double()
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as.integer()
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count'))/10
tmp = xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as_tibble()
tmp[1,1]
xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as.character()
tmp = xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as_tibble()
tmp[1,1]
as.numeric(as.character(tmp$text))
as.numeric(as.character(tmp$text))/10
as.numeric(as.character(tmp$text))/1000
round(as.numeric(as.character(tmp$text))/1000, 1)
round(as.numeric(as.character(tmp$text))/1000, 0)
n = round(as.numeric(as.character(tmp$text))/1000, 0)
queryParams = "/1/1"
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tmp = xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as_tibble()
n = round(as.numeric(as.character(tmp$text))/1000, 0)
result_table_1 = tibble()
for (i in 0:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//ADD_COL')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl9 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl10 = do.call(bind_cols, mget(paste0("tbl",1:7))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl10)
}
queryParams = "/1/1"
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tmp = xmlToDataFrame(nodes = getNodeSet(rootNode, '//list_total_count')) %>% as_tibble()
n = round(as.numeric(as.character(tmp$text))/1000, 0)
result_table_1 = tibble()
for (i in 0:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//ADD_COL')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl9 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl10 = do.call(bind_cols, mget(paste0("tbl",1:9))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl10)
}
result_table_1
tbl1
tbl3
tbl4
tbl5
tbl6
tbl1 = tibble()
tbl2 = tibble()
tbl3 = tibble()
tbl4 = tibble()
tbl5 = tibble()
tbl6 = tibble()
tbl7 = tibble()
tbl8 = tibble()
tbl9 = tibble()
result_table_1 = tibble()
for (i in 0:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//ADD_COL')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl9 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl10 = do.call(bind_cols, mget(paste0("tbl",1:9))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl10)
}
tbl5
?as_tibble
?as_tibble
result_table_1 = tibble()
for (i in 0:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl9 = do.call(bind_cols, mget(paste0("tbl",1:8))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl9)
}
result_table_1
tail(result_table_1)
queryParams = "/115001/116000"
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
rootNode
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl2
queryParams = "/115001/116000"
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl1
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl2
for (i in 115:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl9 = do.call(bind_cols, mget(paste0("tbl",1:8))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl9)
}
for (i in 116:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl9 = do.call(bind_cols, mget(paste0("tbl",1:8))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl9)
}
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
doc
doc = xmlInternalTreeParse(str_c(url, queryParams), encoding = "UTF-8")
doc = xmlInternalTreeParse(str_c(url, queryParams), encoding = "CP949")
doc
doc = xmlTreeParse(str_c(url, queryParams))
doc = xmlTreeParse(str_c(url, queryParams), encoding = "UTF-8")
xml2::read_xml(str_c(url, queryParams))
xml2::read_xml(str_c(url, queryParams), encoding = "UTF-8")
?read_xml()
xmlNativeTreeParse(str_c(url, queryParams))
xmlTreeParse(str_c(url, queryParams))
?xmlInternalTreeParse
xmlInternalTreeParse(str_c(url, queryParams))
doc
rootNode = xmlRoot(doc)
rootNode
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl9 = do.call(bind_cols, mget(paste0("tbl",1:8))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl9)
for (i in 117:n){
queryParams = str_c("/", as.character(i*1000+1), "/", as.character(1000+i*1000))
doc = xmlInternalTreeParse(str_c(url, queryParams))
rootNode = xmlRoot(doc)
tbl1 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_NAME')) %>% as_tibble()
tbl2 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_NAME'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl3 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_UNIT'), homogeneous = TRUE) %>% as_tibble(.name_repair = 'unique')
tbl4 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//A_PRICE')) %>% as_tibble()
tbl5 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//P_DATE')) %>% as_tibble()
tbl6 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_TYPE_NAME')) %>% as_tibble()
tbl7 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_CODE')) %>% as_tibble()
tbl8 = xmlToDataFrame(nodes = getNodeSet(rootNode, '//M_GU_NAME')) %>% as_tibble()
tbl9 = do.call(bind_cols, mget(paste0("tbl",1:8))) %>% as_tibble()
result_table_1 = result_table_1 %>% bind_rows(., tbl9)
}
colnames(result_table_1) = c("시장/마트 이름", "품목 이름", "실판매규격", "가격(원)", "점검일자", "시장유형 구분 이름", "자치구 코드", "자치구 이름")
result_table_1
unique(result_table_1$`자치구 코드`)
duplicated(result_table_1$`자치구 코드`)
table(!duplicated(result_table_1$`자치구 코드`))
table(duplicated(result_table_1$`자치구 코드`))
