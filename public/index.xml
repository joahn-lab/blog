<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joahn-lab</title>
    <link>/</link>
    <description>Recent content on Joahn-lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 2019 - Author Name</copyright>
    <lastBuildDate>Fri, 05 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resume</title>
      <link>/about/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;h2 id=&#34;소개&#34;&gt;소개&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;저는 데이터 저널리스트 및 PD를 꿈꾸는 대학생입니다.&lt;/li&gt;
&lt;li&gt;저는 사진을 찍고, 영상을 만들고 글을 쓰기를 좋아합니다. 주디스 버틀러와 낸시 프레이저를 비롯한 급진 민주주의 관련 서적을 즐겨 읽습니다.&lt;/li&gt;
&lt;li&gt;현재 부산에 살고 있습니다. &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;이력서resume&#34;&gt;이력서(Resume)&lt;/h3&gt;
&lt;p&gt;Why don&amp;rsquo;t you learn more about me on &lt;a href=&#34;https://github.com/joahn-lab/resume&#34;&gt;GitHub&lt;/a&gt;. There is my resume on it. And you can check my &lt;a href=&#34;https://www.instagram.com/babyblu_deepdown&#34;&gt;Instagram&lt;/a&gt;. :)&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Presidential excitable speech analysis</title>
      <link>/2020/06/05/presidential-excitable-speech-analysis/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/05/presidential-excitable-speech-analysis/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;library(tidyverse)
library(lubridate)
library(plyr)
library(readxl)
library(writexl)
library(tictoc)
library(N2H4)
library(xml2)
library(XML)
library(rvest)

setwd(&amp;quot;C:/Users/Byeongjun Cho/Desktop/2020-1/데이터언론학/dataset&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;간단한-소개&#34;&gt;간단한 소개&lt;/h2&gt;
&lt;p&gt;2018.2 ~ 문재인 현 대통령의 국정 지지도와 네이버/다음 메인 시사 뉴스 댓글 중 &amp;lsquo;문재앙&amp;rsquo; 키워드를 포함한 댓글의 좋아요/싫어요 수치를 구한다. 이를 상관 분석을 통해 비교하고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;국정-지지도-자료-수집&#34;&gt;국정 지지도 자료 수집&lt;/h2&gt;
&lt;p&gt;현 대통령의 국정 지지도 수치는 국내 여론조사 기관 &amp;lsquo;한국갤럽&amp;rsquo;과 &amp;lsquo;리얼미터&amp;rsquo;의 주간 집계자료를 이용하되, 위키백과 항목에 주간별로 정리된 테이블을 스프레드시트에 옮겨 R로 전처리 후 사용한다. 보다 세부적인 대통령 국정평가 항목, 즉 &amp;lsquo;긍정평가&amp;rsquo; &amp;lsquo;부정평가&amp;rsquo; 수치는 각 여론조사 기관 홈페이지에 게재되는 주간 동향 보도자료 내 수치를 스프레드시트로 정리한 후 사용한다.
cf. 구글 스프레드시트를 통해 크롤링하는 방법도 고려했지만, 여론조사 홈페이지 URL 링크의 불규칙성, 한글 주소의 인코딩 문제, PDF 파일 크롤링의 어려움 등을 감안해 주간 자료를 직접 table로 정리하는 것이 효율적이라고 판단했다.&lt;/p&gt;
&lt;p&gt;국정 지지도 자료를 구하는 데에는 크게 2가지 경로가 있다. 하나는 위키백과 &amp;lsquo;대통령 지지율&amp;rsquo; 항목에서 표로 정리된 리얼미터/한국갤럽 자료를 이용하는 것이고, 다른 하나는 해당 조사기관 홈페이지에 주마다 게시되는 보도자료를 직접 참조하는 것이다. 나는 일차적인 분석을 위해 간편한 위키백과 도표 자료를 이용하고, 일정한 인사이트를 얻은 후 해당 홈페이지에 게시된 보도자료의 더 상세한 수치를 직접 정리하여 R로 불러왔다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;
# 조사기관 보도자료 내 긍정/부정평가 항목 데이터 불러오기 (리얼미터, 한국갤럽)

rlmeter_president = read_xlsx(&amp;quot;poll_president.xlsx&amp;quot;, sheet = 1, range = cell_cols(&amp;quot;A:H&amp;quot;))
gallup_president = read_xlsx(&amp;quot;poll_president.xlsx&amp;quot;, sheet = 2, range = cell_cols(&amp;quot;B:H&amp;quot;))
gallup_president = bind_cols(gallup_president[1:120,], rlmeter_president[,1]) %&amp;gt;% 
  select(...1, everything(), -`월(M)`, -`주(W)`, -`표본 수`)

# 위키백과 &#39;대통령 지지도&#39; 항목에서 긁어온 데이터 전처리

wiki = read_xlsx(&amp;quot;wiki_president.xlsx&amp;quot;)

for (i in 39:71){
  wiki[i-1, 1:3] = wiki[i,1:3]}
for (i in 73:160){
  wiki[i-2, 1:3] = wiki[i,1:3]}

wiki = wiki[1:158, 1:3]
wiki = wiki %&amp;gt;% mutate(gallup = as.character(`한국갤럽[3]`),
                gallup = ifelse(gallup == &amp;quot;미조사&amp;quot;, NA, round(as.numeric(gallup),3)),
                rlmeter = as.character(`리얼미터[4]`),
                rlmeter = ifelse(rlmeter == &amp;quot;미조사&amp;quot;, NA, round(as.numeric(rlmeter),3)))
wiki$gallup = round(as.numeric(wiki$gallup), 4)
wiki$rlmeter = round(as.numeric(wiki$rlmeter), 5)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;문재앙-지수-만들기-1-댓글-크롤링&#34;&gt;문재앙 지수 만들기 (1) 댓글 크롤링&lt;/h2&gt;
&lt;h2 id=&#34;네이버-기사-링크-추출&#34;&gt;네이버 기사 링크 추출&lt;/h2&gt;
&lt;p&gt;댓글을 크롤링할 기사로 뉴스 랭킹 배너에 조회수 기준 일간 상위 30개의 기사(부문별 5개, 총 6개 부문)을 선정한다.&lt;/p&gt;
&lt;p&gt;네이버 &amp;lsquo;많이 본 기사&amp;rsquo; 랭킹 배너 링크를 들어가보면,
(&amp;ldquo;&lt;a href=&#34;https://news.naver.com/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=20180212%22)(2018.2.12&#34;&gt;https://news.naver.com/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=20180212&amp;quot;)(2018.2.12&lt;/a&gt;일자)
일간 누적 집계된 조회수 기준 상위 30개의 6개 부문 기사 제목과 링크가 나열되어 있는 것을 확인할 수 있다.
우리는 여기서 구글 스프레드 시트의 importxml() 함수와 xpath 정규 표현식을 활용하여 일자별 30개의 기사 링크를 긁어올 수 있다.
여기서 랭킹 배너의 링크에는 일정한 규칙성이 있으므로, 랭킹 배너에 접근할 URL은 main_url(&amp;ldquo;&lt;a href=&#34;https://news.naver.com&#34;&gt;https://news.naver.com&lt;/a&gt;&amp;rdquo;)에 sub_url 변수를 for문을 통해 조합하는 방식으로 마련하였다.
조사 대상 날짜인 2018.02.06 ~ 2020.06. ** 에서 일자별 자동 추출된 30개의 기사링크는 구글 스프레드시트에 쌓고 &amp;ldquo;naver_df.xlsx&amp;rdquo; 파일로 추출한 후 이를 R로 불러온다.&lt;/p&gt;
&lt;p&gt;+) 위와 같이 기사 링크를 추출하는 방식은 importxml() 함수를 사용하기 위해 구글 스프레드시트를 거쳐야 하는 불편함이 다소 있었다. 따라서 &amp;lsquo;다음&amp;rsquo; 기사 링크를 추출할 때는 Rstudio 내에서 해당 크롤링 작업을 할 수 있도록 하였다. 즉, &amp;lsquo;xml2&amp;rsquo; 패키지의 read_html() 함수와 &amp;lsquo;rvest&amp;rsquo; 패키지의 html_nodes() 함수 등을 이용하여 랭킹 배너의 html 소스코드에 열거된 상위 10개 기사의 링크를 가져오도록 했다. (하단 코드 참조)&lt;/p&gt;
&lt;h2 id=&#34;댓글-필터링-및-크롤링-좋아요싫어요-수-합산&#34;&gt;댓글 필터링 및 크롤링, 좋아요/싫어요 수 합산&lt;/h2&gt;
&lt;p&gt;크롤링할 댓글 양이 상당하다는 점을 감안해 이미 마련된 패키지를 활용하기로 한다. 사용할 패키지는 N2H4, DNH4이며,
각각 네이버/다음 내부 기사 URL을 인자로 넣으면 해당 기사에 달린 댓글과 좋아요/싫어요 수 등 다양한 변수를 크롤링해준다. 현재까지 문재앙 지수를 산출하는 데 필요한 변수들은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;일간 상위 30개 기사에 달린 모든 댓글의 좋아요/싫어요 총합&lt;/li&gt;
&lt;li&gt;&amp;lsquo;문재앙&amp;rsquo; 및 관련 어휘가 포함/제외된 모든 댓글의 좋아요/싫어요 총합&lt;/li&gt;
&lt;li&gt;&amp;lsquo;문재앙&amp;rsquo; 및 관련 어휘가 포함/제외된 모든 댓글 수&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데 이때, 우리는 타당한 지수 산출을 위해 매크로 및 유령 계정 활용, &amp;lsquo;좌표 찍기&amp;rsquo;를 비롯한 댓글상의 정치 공작 등의 불필요한 과도표집을 예방해야 할 것이다. 따라서 특정 댓글 내용을 아예 똑같이 복사한 경우인 기사 내/(동일 일자) 기사 간 중복댓글을 표본에서 배제하고, 중복댓글 중 시간상 마지막에 달린 단 1개의 댓글만을 표본에 반영할 것이다. 또한 &amp;lsquo;문재앙&amp;rsquo; 어휘를 포함한 임의의 1000개 댓글을 훑어본 결과,  100개당 1-2개꼴로 현 대통령을 지지하는 댓글을 발견했는데, 대체로 &amp;lsquo;문재앙 타령&amp;rsquo; 이라고 말하는 식이었다. 따라서 &amp;lsquo;문재앙&amp;rsquo;이라는 어휘가 포함된 댓글 중 &amp;lsquo;타령&amp;rsquo;이라는 어휘가 없거나, &amp;lsquo;탄핵&amp;rsquo;이라는 강한 부정어를 포함하는 댓글을 수집하는 것으로 2차 필터링을 거쳤다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;
main_url = &amp;quot;https://news.naver.com&amp;quot;
operator = &amp;quot;/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()

Summary_3 = tibble()
for (j in 1:nrow(datelist)){
  Summary_1 = tibble()
  Summary_2 = tibble()
  tmp_1 = tibble()
  tmp_2 = tibble()
  date = datelist[j,1]
  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &#39;dl&#39;) %&amp;gt;% html_nodes(&#39;a&#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  tic()
  for (i in 1:30){
    sub_url = tmp[i]
    tmp_1 = getAllComment(str_c(main_url, sub_url)) %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(contents)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;), -imageCount)
    Summary_1 = bind_rows(Summary_1, tmp_1)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문재앙&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_2 = bind_rows(Summary_2, tmp_2)}
  toc()
  
  nrow = nrow(Summary_1)
  nrow_1 = nrow(Summary_2)
  Summary_1 = Summary_1 %&amp;gt;%
    filter(!duplicated(contents))
  like = sum(Summary_1$sympathyCount)
  dislike = sum(Summary_1$antipathyCount)
  
  Summary_2 = Summary_2 %&amp;gt;%
    filter(!duplicated(contents))
  like_1 = sum(Summary_2$sympathyCount)
  dislike_1 = sum(Summary_2$antipathyCount)

  Summary_3[j, 1] = ymd(date)
  Summary_3[j, 2] = like
  Summary_3[j, 3] = dislike
  Summary_3[j, 4] = nrow
  Summary_3[j, 5] = like_1
  Summary_3[j, 6] = dislike_1
  Summary_3[j, 7] = nrow_1

  print(ymd(date))}

write.csv(Summary_3, &amp;quot;Summary_df_5.csv&amp;quot;)

Summary_3$week = as.Date(cut(Summary_3$...1, breaks = &amp;quot;week&amp;quot;, start.on.monday = FALSE)) - 1
Summary_3
for (i in 2:767){
  Summary_3$week[i-1] = Summary_3$week[i]}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;다음-기사-링크-추출&#34;&gt;다음 기사 링크 추출&lt;/h2&gt;
&lt;p&gt;&amp;lsquo;다음&amp;rsquo;의 경우 랭킹 뉴스 배너 조회수 기준 일자별 상위 10개 기사를 댓글 추출 대상으로 한다. (&amp;lsquo;2019 언론수용자 조사&amp;rsquo;의 포털별 뉴스 점유율에 따라(네이버 91%, 다음 20%, 중복응답) 기사 갯수를 선정했다.) 크롤링 코드는 다음과 같다. 앞서 언급한대로 &amp;lsquo;xml2&amp;rsquo;, &amp;lsquo;rvest&amp;rsquo; 패키지 내장 함수를 통해 html 소스코드에서 일자별 기사 링크를 추출하고 해당 링크 기사에 달린 댓글들에 접근하는 방식을 취하였다. 이떄 사용한 &amp;lsquo;DNH4&amp;rsquo; 패키지의 getAllComment() 함수는 패키지상의 오류가 발생하곤 했으므로 상응하는 예외처리를 거쳤다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;library(DNH4)

main_url = &amp;quot;https://media.daum.net/ranking/popular&amp;quot;
operator = &amp;quot;?regDate=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()
linklist = list()

Summary_4 = tibble()
print(datelist, n = 300)

for (i in 1:nrow(datelist)){
  Summary_1 = tibble()
  Summary_2 = tibble()
  date = datelist[i,1] 

  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &#39;li&#39;) %&amp;gt;% html_nodes(&#39;a&#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  linklist = unique(tmp[44:63])

for (j in 1:length(linklist)){
  tic()
  tmp_1 = tibble()
  tmp_2 = tibble()
    sub_url = linklist[j]
    if(is_null(tryNULL(getAllComment(sub_url)))){next} else {
    tmp_1 = getAllComment(sub_url) %&amp;gt;% as.data.table() %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(content)) %&amp;gt;%
      select(content, likeCount, dislikeCount)
    Summary_1 = bind_rows(Summary_1, tmp_1)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(content, &amp;quot;문재앙&amp;quot;)) %&amp;gt;%
      filter(!str_detect(content, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(content, likeCount, dislikeCount)
    Summary_2 = bind_rows(Summary_2, tmp_2)}}
  toc()
  
  Summary_1 = Summary_1 %&amp;gt;%
    filter(!duplicated(content))
  nrow = nrow(Summary_1)
  like = sum(Summary_1$likeCount)
  dislike = sum(Summary_1$dislikeCount)
  
  Summary_2 = Summary_2 %&amp;gt;%
    filter(!duplicated(content))
  nrow_1 = nrow(Summary_2)
  like_1 = sum(Summary_2$likeCount)
  dislike_1 = sum(Summary_2$dislikeCount)
  
  Summary_4[i-1, 1] = date
  Summary_4[i-1, 2] = like
  Summary_4[i-1, 3] = dislike
  Summary_4[i-1, 4] = nrow
  Summary_4[i-1, 5] = like_1
  Summary_4[i-1, 6] = dislike_1
  Summary_4[i-1, 7] = nrow_1
  print(i)}

write.csv(Summary_4, &amp;quot;Summary_new_df_daum.csv&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;lsquo;문재앙&amp;rsquo; 어휘를 포함한 댓글이 수집된 Summary_2 데이터를 살펴보자. (예외처리를 거친) 대략 845일간의 &amp;lsquo;문재앙&amp;rsquo; 댓글 전량을 수집하였음에도 4500개 댓글뿐으로, 이는 하루 5개 정도의 댓글만이 &amp;lsquo;문재앙&amp;rsquo; 어휘를 사용했음을 뜻한다. 다음 플랫폼 주 이용자의 정치적 성향을 고려하더라도 이는 상당히 적은 양의 댓글 수이므로 독립적인 표본으로서 결과에 반영하기 애매한듯 보이므로 우선은 분석 대상에서 제외하는 것이 나을 것 같다.&lt;/p&gt;
&lt;h2 id=&#34;문재앙-지수-만들기-2-국정-지지도와-초벌-상관-분석&#34;&gt;문재앙 지수 만들기 (2) 국정 지지도와 초벌 상관 분석&lt;/h2&gt;
&lt;p&gt;이제 수집된 네이버 댓글 데이터와 위키백과의 &amp;lsquo;대통령 지지도&amp;rsquo; 항목에 제시된 국정평가 도표 수치를 비교해보자. 대강의 상관관계를 파악하는 데 도움을 줄 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;#계산법 yes/yes+no - like/like+dislike 하고 -1은 완전 긍정평가 1은 완전 부정평가로 간주
Summary_3 = Summary_3 %&amp;gt;%
  group_by(week) %&amp;gt;%
  mutate(disaster = ...1/(...2 + ...1) - ...4/(...4+...5))
Summary_3 = Summary_3 %&amp;gt;% mutate(tmp_total = ...1/(...2 + ...1)) %&amp;gt;% mutate(tmp_mun = ...4/(...4+...5))
cor.test(Summary_3$tmp_total, Summary_3$tmp_mun) # 상관계수 0.2228306 약한 양적 선형 관계

Summary_5 = tibble()
for (i in 1:111){
Summary_5[i,1] = mean(Summary_3$disaster[Summary_3$week == unique(Summary_3$week)[i]])}
print(wiki, n = Inf)

wiki = wiki %&amp;gt;% mutate(gallup = ifelse(is.na(gallup), rlmeter, gallup)) %&amp;gt;% mutate(rlmeter = ifelse(is.na(rlmeter), gallup, rlmeter))

for (i in 39:149){
Summary_5[i-38,2] = mean(wiki$gallup[i], wiki$rlmeter[i], na.rm = TRUE)}
# 56행은 18년 6월 1주, 두 여론조사 기관 모두 미조사므로 뺴고 계산
Summary_5 = Summary_5[c(1:~~, ~~:111),]

cor.test(Summary_5$...1, Summary_5$...2) # 두 계수가 관련 있을 수도 있다! 피어슨 상관계수 0.6468249

# 우선 여기까지 저장
write_xlsx(Summary_3, &amp;quot;disaster_df.xlsx&amp;quot;)
write_xlsx(Summary_4, &amp;quot;compare_ratio_df.xlsx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;문재앙-지수-만들기-3-인사이트-파악-후-산출식-수정&#34;&gt;문재앙 지수 만들기 (3) 인사이트 파악 후 산출식 수정&lt;/h2&gt;
&lt;p&gt;여기서 나아가 다른 어휘들은 어떤 상관관계가 있을지까지 파악해 보기로 했다. 코드는 다음과 같다.
(네이버 서버상의 문제인지 같은 일자에서 계속해서 오류가 발생했다. 따라서 for문을 돌리는 와중에 중간중간 오류 발생 시 예외처리를 하고 코드 실행을 재개해야 한다.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{r&#34; data-lang=&#34;{r&#34;&gt;main_url = &amp;quot;https://news.naver.com&amp;quot;
operator = &amp;quot;/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()
# datelist = datelist[774:844, 1]

Summary_3 = tibble()

for (j in 1:nrow(datelist)){
  Summary_2 = tibble()
  Summary_4 = tibble()
  Summary_5 = tibble()
  Summary_6 = tibble()
  date = datelist[j,1]
  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &#39;dl&#39;) %&amp;gt;% html_nodes(&#39;a&#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  tic()
  tmp_1 = tibble()
  tmp_2 = tibble()
  tmp_3 = tibble()
  tmp_4 = tibble()
  tmp_5 = tibble()
  for (i in 1:30){
    sub_url = tmp[i]
    tmp_1 = getAllComment(str_c(main_url, sub_url)) %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(contents)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;), -imageCount)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문죄인&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_2 = bind_rows(Summary_2, tmp_2)
    
    tmp_3 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;중국몽&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_4 = bind_rows(Summary_4, tmp_3)
    
    tmp_4 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문슬람&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_5 = bind_rows(Summary_5, tmp_4)
    
    tmp_5 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;대깨문&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_6 = bind_rows(Summary_6, tmp_5)}
  toc()
  
  Summary_2 = Summary_2 %&amp;gt;%
    filter(!duplicated(contents))
  Summary_4 = Summary_4 %&amp;gt;%
    filter(!duplicated(contents))
  Summary_5 = Summary_5 %&amp;gt;%
    filter(!duplicated(contents))
  Summary_6 = Summary_6 %&amp;gt;%
    filter(!duplicated(contents))
  
  nrow_1 = nrow(Summary_2)
  nrow_2 = nrow(Summary_4)
  nrow_3 = nrow(Summary_5)
  nrow_4 = nrow(Summary_6)

  like_1 = sum(Summary_2$sympathyCount)
  dislike_1 = sum(Summary_2$antipathyCount)
  like_2 = sum(Summary_4$sympathyCount)
  dislike_2 = sum(Summary_4$antipathyCount)
  like_3 = sum(Summary_5$sympathyCount)
  dislike_3 = sum(Summary_5$antipathyCount)
  like_4 = sum(Summary_6$sympathyCount)
  dislike_4 = sum(Summary_6$antipathyCount)
  
  Summary_3[j, 1] = ymd(date)
  Summary_3[j, 2] = like_1
  Summary_3[j, 3] = dislike_1
  Summary_3[j, 4] = nrow_1
  Summary_3[j, 5] = like_2
  Summary_3[j, 6] = dislike_2
  Summary_3[j, 7] = nrow_2
  Summary_3[j, 8] = like_3
  Summary_3[j, 9] = dislike_3
  Summary_3[j, 10] = nrow_3
  Summary_3[j, 11] = like_4
  Summary_3[j, 12] = dislike_4
  Summary_3[j, 13] = nrow_4
        
  print(ymd(date))}

write.csv(Summary_3, &amp;quot;others_190904_0529_but575.csv&amp;quot;)

Summary_3$week = as.Date(cut(as.Date(Summary_3$...7), breaks = &amp;quot;week&amp;quot;, start.on.monday = FALSE)) - 1
for (i in 2:838){
  Summary_3$week[i-1] = Summary_3$week[i]}

Summary_full = tibble()
for (i in 1:121){
  Summary_full[i,1] = sum(Summary_3$...2[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,2] = sum(Summary_3$...3[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,3] = sum(Summary_3$...4[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,4] = sum(Summary_3$...5[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,5] = sum(Summary_3$...6[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,6] = sum(Summary_3$...7[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,7] = sum(Summary_3$...8[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,8] = sum(Summary_3$...9[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,9] = sum(Summary_3$...10[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,10] = sum(Summary_3$...11[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,11] = sum(Summary_3$...12[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,12] = sum(Summary_3$...13[Summary_3$week == unique(Summary_3$week)[i]])
  Summary_full[i,13] = unique(Summary_3$week)[i]}

write_xlsx(Summary_full, &amp;quot;full.xlsx&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;엑셀 스프레드시트로 변수명 변경 및 열 배치 등 간단한 전처리를 하고 여론조사 집계자료와 상관분석할 준비를 마친다.&lt;/p&gt;
&lt;h2 id=&#34;문재앙-지수-분석하기&#34;&gt;문재앙 지수 분석하기&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Presidential excitable speech analysis (1)</title>
      <link>/posts/presidential-excitable-speech-analysis_1/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/presidential-excitable-speech-analysis_1/</guid>
      <description>


&lt;blockquote&gt;
&lt;p&gt;본 프로젝트는 2회에 걸쳐 게시되었습니다. 첫 번째 게시물은 자료 수집과 전처리 및 산출식 개발 등에 초점을 맞추고, 두 번째 게시물은 본격적인 상관분석, 시각화와 주관적 분석을 다루고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;목차&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;도입
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;간단한 소개&lt;/li&gt;
&lt;li&gt;국정 지지도 자료 수집&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;문재앙 지수 만들기
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;댓글 크롤링
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;네이버&lt;/li&gt;
&lt;li&gt;다음&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;국정 지지도와 초벌 상관 분석&lt;/li&gt;
&lt;li&gt;인사이트 파악 및 산출식 개발&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;간단한-소개&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;간단한 소개&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt; 2018.2 ~ 문재인 현 대통령의 국정 지지도&lt;/strong&gt;와 네이버/다음 메인 시사 뉴스 댓글 중 &lt;strong&gt;‘문재앙’ 키워드를 포함한 댓글의 좋아요/싫어요 수치&lt;/strong&gt;를 구한다. 이를 상관 분석을 통해 비교하고자 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;국정-지지도-자료-수집&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;국정 지지도 자료 수집&lt;/h2&gt;
&lt;p&gt;현 대통령의 국정 지지도 수치는 국내 여론조사 기관 ‘한국갤럽’과 ’리얼미터’의 주간 집계자료를 이용하되, 위키백과 항목에 주간별로 정리된 테이블을 스프레드시트에 옮겨 R로 전처리 후 사용한다. 보다 세부적인 대통령 국정평가 항목, 즉 ’긍정평가’ ‘부정평가’ 수치는 각 여론조사 기관 홈페이지에 게재되는 주간 동향 보도자료 내 수치를 스프레드시트로 정리한 후 사용한다.
cf. 구글 스프레드시트를 통해 크롤링하는 방법도 고려했지만, 여론조사 홈페이지 URL 링크의 불규칙성, 한글 주소의 인코딩 문제, PDF 파일 크롤링의 어려움 등을 감안해 주간 자료를 직접 table로 정리하는 것이 효율적이라고 판단했다.&lt;/p&gt;
&lt;p&gt;국정 지지도 자료를 구하는 데에는 크게 2가지 경로가 있다. 하나는 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%98_%EB%8C%80%ED%86%B5%EB%A0%B9_%EC%A7%80%EC%A7%80%EC%9C%A8&#34;&gt;위키백과 ‘대한민국의 대통령 지지율’ 항목&lt;/a&gt;에서 표로 정리된 리얼미터/한국갤럽 자료를 이용하는 것이고, 다른 하나는 해당 조사기관 홈페이지에 주마다 게시되는 보도자료를 직접 참조하는 것이다. 나는 일차적인 분석을 위해 간편한 위키백과 도표 자료를 이용하고, 일정한 인사이트를 얻은 후 해당 홈페이지에 게시된 보도자료의 더 상세한 수치를 직접 구글스프레드 시트 등으로 정리하여 R로 불러왔다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 조사기관 보도자료 내 긍정/부정평가 항목 데이터 불러오기 (리얼미터, 한국갤럽)

rlmeter_president = read_xlsx(&amp;quot;poll_president.xlsx&amp;quot;, sheet = 1, range = cell_cols(&amp;quot;A:H&amp;quot;))
rlmeter_president&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 120 x 8
##    week                매우잘한다 잘하는편 잘못하는편 매우잘못함 잘한다 잘못한다
##    &amp;lt;dttm&amp;gt;                   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 2018-02-03 00:00:00       41.5     22         13.3       18.8   63.5     32.1
##  2 2018-02-10 00:00:00       43.8     19.3       12.4       19.1   63.1     31.5
##  3 2018-02-17 00:00:00       41.7     24         11         17.9   65.7     28.9
##  4 2018-02-24 00:00:00       42       23.5       12         18.6   65.5     30.6
##  5 2018-03-03 00:00:00       44.8     21         12.5       15.7   65.8     28.2
##  6 2018-03-10 00:00:00       49.2     20.4       10.5       13.3   69.6     23.8
##  7 2018-03-17 00:00:00       49.3     19.8       10.5       16.1   69.1     26.6
##  8 2018-03-24 00:00:00       48.6     20.9       11.1       14.5   69.5     25.6
##  9 2018-03-31 00:00:00       46.7     21.4       11.8       13.9   68.1     25.7
## 10 2018-04-07 00:00:00       42.9     23.9       11.6       15.1   66.8     26.7
## # ... with 110 more rows, and 1 more variable: 모름 &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gallup_president = read_xlsx(&amp;quot;poll_president.xlsx&amp;quot;, sheet = 2, range = cell_cols(&amp;quot;B:H&amp;quot;))
gallup_president = bind_cols(gallup_president[1:120,], rlmeter_president[,1]) %&amp;gt;% 
  select(week, everything(), -`월(M)`, -`주(W)`, -`표본 수`)
gallup_president&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 120 x 5
##    week                g잘하고있다 g잘못하고있다 g어느쪽도아니다 g모름응답거절
##    &amp;lt;dttm&amp;gt;                    &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;           &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
##  1 2018-02-03 00:00:00        0.63          0.28            0.04          0.05
##  2 2018-02-10 00:00:00       NA            NA              NA            NA   
##  3 2018-02-17 00:00:00        0.68          0.22            0.05          0.04
##  4 2018-02-24 00:00:00        0.64          0.26            0.04          0.06
##  5 2018-03-03 00:00:00        0.71          0.22            0.04          0.04
##  6 2018-03-10 00:00:00        0.74          0.18            0.05          0.04
##  7 2018-03-17 00:00:00        0.71          0.19            0.06          0.05
##  8 2018-03-24 00:00:00        0.7           0.21            0.05          0.04
##  9 2018-03-31 00:00:00        0.74          0.17            0.05          0.04
## 10 2018-04-07 00:00:00        0.72          0.19            0.05          0.04
## # ... with 110 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 위키백과 &amp;#39;대통령 지지도&amp;#39; 항목에서 긁어온 데이터 전처리

wiki = read_xlsx(&amp;quot;wiki_president.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2,1))
plot.ts(wiki$gallup)
plot.ts(wiki$rlmeter)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-05-presidential-excitable-speech-analysis-1_files/figure-html/visual-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;위키백과 항목의 결측값 탓에 푹 꺼진 부분을 제외하고 대강의 추세를 살펴보면, 지난 약 2년여간 대통령의 지지율은 꾸준히 감소해왔음을 알 수 있다. 이는 집권 중반기를 지난 탓에 통상적인 레임덕 현상이 나타났음으로 보이며, 다만 코로나 사태에 대해 성공적인 국정 운영으로 평가받는 최근에 들어서는 지지율이 다소 상승한 추세를 확인할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;문재앙-지수-만들기-1-댓글-크롤링&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;문재앙 지수 만들기 (1) 댓글 크롤링&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;네이버-기사-링크-추출&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;네이버 기사 링크 추출&lt;/h2&gt;
&lt;p&gt;댓글을 크롤링할 기사로 뉴스 랭킹 배너에 조회수 기준 일간 상위 30개의 기사(부문별 5개, 총 6개 부문)을 선정한다.&lt;/p&gt;
&lt;p&gt;네이버 ‘많이 본 기사’ 랭킹 배너 링크를 들어가보면,
(“&lt;a href=&#34;https://news.naver.com/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=20180212&#34; class=&#34;uri&#34;&gt;https://news.naver.com/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=20180212&lt;/a&gt;”)(2018.2.12일자)
일간 누적 집계된 조회수 기준 상위 30개의 6개 부문 기사 제목과 링크가 나열되어 있는 것을 확인할 수 있다.
우리는 여기서 구글 스프레드 시트의 importxml() 함수와 xpath 정규 표현식을 활용하여 일자별 30개의 기사 링크를 긁어올 수 있다.
여기서 랭킹 배너의 링크에는 일정한 규칙성이 있으므로, 랭킹 배너에 접근할 URL은 main_url(“&lt;a href=&#34;https://news.naver.com&#34; class=&#34;uri&#34;&gt;https://news.naver.com&lt;/a&gt;”)에 sub_url 변수를 for문을 통해 조합하는 방식으로 마련하였다.
조사 대상 날짜인 2018.02.06 ~ 2020.06. ** 에서 일자별 자동 추출된 30개의 기사링크는 구글 스프레드시트에 쌓고 “naver_df.xlsx” 파일로 추출한 후 이를 R로 불러온다.&lt;/p&gt;
&lt;p&gt;+) 위와 같이 기사 링크를 추출하는 방식은 importxml() 함수를 사용하기 위해 구글 스프레드시트를 거쳐야 하는 불편함이 다소 있었다. 따라서 ‘다음’ 기사 링크를 추출할 때는 Rstudio 내에서 해당 크롤링 작업을 할 수 있도록 하였다. 즉, ‘xml2’ 패키지의 read_html() 함수와 ‘rvest’ 패키지의 html_nodes() 함수 등을 이용하여 랭킹 배너의 html 소스코드에 열거된 상위 10개 기사의 링크를 가져오도록 했다. (하단 코드 참조)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;댓글-필터링-및-크롤링-좋아요싫어요-수-합산&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;댓글 필터링 및 크롤링, 좋아요/싫어요 수 합산&lt;/h2&gt;
&lt;p&gt;크롤링할 댓글 양이 상당하다는 점을 감안해 이미 마련된 패키지를 활용하기로 한다. 사용할 패키지는 N2H4, DNH4이며,
각각 네이버/다음 내부 기사 URL을 인자로 넣으면 해당 기사에 달린 댓글과 좋아요/싫어요 수 등 다양한 변수를 크롤링해준다. 현재까지 문재앙 지수를 산출하는 데 필요한 변수들은 다음과 같다.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;일간 상위 30개 기사에 달린 모든 댓글의 좋아요/싫어요 총합&lt;/li&gt;
&lt;li&gt;‘문재앙’ 및 관련 어휘가 포함/제외된 모든 댓글의 좋아요/싫어요 총합&lt;/li&gt;
&lt;li&gt;‘문재앙’ 및 관련 어휘가 포함/제외된 모든 댓글 수&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데 이때, 우리는 타당한 지수 산출을 위해 매크로 및 유령 계정 활용, ‘좌표 찍기’를 비롯한 댓글상의 정치 공작 등의 불필요한 과도표집을 예방해야 할 것이다. 따라서 특정 댓글 내용을 아예 똑같이 복사한 경우인 기사 내/(동일 일자) 기사 간 중복댓글을 표본에서 배제하고, 중복댓글 중 시간상 마지막에 달린 단 1개의 댓글만을 표본에 반영할 것이다. 또한 ’문재앙’ 어휘를 포함한 임의의 1000개 댓글을 훑어본 결과, 100개당 1-2개꼴로 현 대통령을 지지하는 댓글을 발견했는데, 대체로 ‘문재앙 타령’ 이라고 말하는 식이었다. 따라서 ’문재앙’이라는 어휘가 포함된 댓글 중 ’타령’이라는 어휘가 없거나, ’탄핵’이라는 강한 부정어를 포함하는 댓글을 수집하는 것으로 2차 필터링을 거쳤다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;main_url = &amp;quot;https://news.naver.com&amp;quot;
operator = &amp;quot;/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()

Summary_3 = tibble()
for (j in 1:nrow(datelist)){
  Summary_1 = tibble()
  Summary_2 = tibble()
  tmp_1 = tibble()
  tmp_2 = tibble()
  date = datelist[j,1]
  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &amp;#39;dl&amp;#39;) %&amp;gt;% html_nodes(&amp;#39;a&amp;#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  tic()
  for (i in 1:30){
    sub_url = tmp[i]
    tmp_1 = getAllComment(str_c(main_url, sub_url)) %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(contents)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;), -imageCount)
    Summary_1 = bind_rows(Summary_1, tmp_1)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문재앙&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_2 = bind_rows(Summary_2, tmp_2)}
  toc()
  
  nrow = nrow(Summary_1)
  nrow_1 = nrow(Summary_2)
  Summary_1 = Summary_1 %&amp;gt;%
    filter(!duplicated(contents))
  like = sum(Summary_1$sympathyCount)
  dislike = sum(Summary_1$antipathyCount)
  
  Summary_2 = Summary_2 %&amp;gt;%
    filter(!duplicated(contents))
  like_1 = sum(Summary_2$sympathyCount)
  dislike_1 = sum(Summary_2$antipathyCount)

  Summary_3[j, 1] = ymd(date)
  Summary_3[j, 2] = like
  Summary_3[j, 3] = dislike
  Summary_3[j, 4] = nrow
  Summary_3[j, 5] = like_1
  Summary_3[j, 6] = dislike_1
  Summary_3[j, 7] = nrow_1

  print(ymd(date))}

write.csv(Summary_3, &amp;quot;Summary_df_5.csv&amp;quot;)

Summary_3$week = as.Date(cut(Summary_3$...1, breaks = &amp;quot;week&amp;quot;, start.on.monday = FALSE)) - 1
Summary_3
for (i in 2:767){
  Summary_3$week[i-1] = Summary_3$week[i]}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;다음-기사-링크-추출&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;다음 기사 링크 추출&lt;/h2&gt;
&lt;p&gt;‘다음’의 경우 랭킹 뉴스 배너 조회수 기준 일자별 상위 10개 기사를 댓글 추출 대상으로 한다. (’2019 언론수용자 조사’의 포털별 뉴스 점유율에 따라(네이버 91%, 다음 20%, 중복응답) 기사 갯수를 선정했다.) 크롤링 코드는 다음과 같다. 앞서 언급한대로 ’xml2’, ‘rvest’ 패키지 내장 함수를 통해 html 소스코드에서 일자별 기사 링크를 추출하고 해당 링크 기사에 달린 댓글들에 접근하는 방식을 취하였다. 이떄 사용한 ‘DNH4’ 패키지의 getAllComment() 함수는 패키지상의 오류가 발생하곤 했으므로 상응하는 예외처리를 거쳤다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(DNH4)

main_url = &amp;quot;https://media.daum.net/ranking/popular&amp;quot;
operator = &amp;quot;?regDate=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()
linklist = list()

Summary_4 = tibble()
print(datelist, n = 300)

for (i in 1:nrow(datelist)){
  Summary_1 = tibble()
  Summary_2 = tibble()
  date = datelist[i,1] 

  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &amp;#39;li&amp;#39;) %&amp;gt;% html_nodes(&amp;#39;a&amp;#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  linklist = unique(tmp[44:63])

for (j in 1:length(linklist)){
  tic()
  tmp_1 = tibble()
  tmp_2 = tibble()
    sub_url = linklist[j]
    if(is_null(tryNULL(getAllComment(sub_url)))){next} else {
    tmp_1 = getAllComment(sub_url) %&amp;gt;% as.data.table() %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(content)) %&amp;gt;%
      select(content, likeCount, dislikeCount)
    Summary_1 = bind_rows(Summary_1, tmp_1)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(content, &amp;quot;문재앙&amp;quot;)) %&amp;gt;%
      filter(!str_detect(content, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(content, likeCount, dislikeCount)
    Summary_2 = bind_rows(Summary_2, tmp_2)}}
  toc()
  
  Summary_1 = Summary_1 %&amp;gt;%
    filter(!duplicated(content))
  nrow = nrow(Summary_1)
  like = sum(Summary_1$likeCount)
  dislike = sum(Summary_1$dislikeCount)
  
  Summary_2 = Summary_2 %&amp;gt;%
    filter(!duplicated(content))
  nrow_1 = nrow(Summary_2)
  like_1 = sum(Summary_2$likeCount)
  dislike_1 = sum(Summary_2$dislikeCount)
  
  Summary_4[i-1, 1] = date
  Summary_4[i-1, 2] = like
  Summary_4[i-1, 3] = dislike
  Summary_4[i-1, 4] = nrow
  Summary_4[i-1, 5] = like_1
  Summary_4[i-1, 6] = dislike_1
  Summary_4[i-1, 7] = nrow_1
  print(i)}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;daum_disaster_reply = read_xlsx(&amp;quot;daum_disaster_reply.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;daum_disaster_reply&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,583 x 3
##    content                                                likeCount dislikeCount
##    &amp;lt;chr&amp;gt;                                                      &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;
##  1 &amp;quot;문재앙이 기래기&amp;quot;                                              1            0
##  2 &amp;quot;문재앙, 공산당이 싫어요&amp;quot;                                      0            3
##  3 &amp;quot;김대중좌빨세끼 국민연금만들고 실실 .... 노무현좌빨세끼 도로명주소법제화시키고 실실.... 문~         0            1
##  4 &amp;quot;문재앙 정권이 그렇지 뭐&amp;quot;                                      2            3
##  5 &amp;quot;경찰놈들도 문재앙&amp;quot;                                            1            2
##  6 &amp;quot;문재앙식 문주주의 크라스에 지렸습니다&amp;quot;                        1            4
##  7 &amp;quot;문재앙 미 친 새 퀴 때문에 장사 안되는데 ~ 세금만 뜯어 가려 하네? 미 친 놈들 ㅉㅉ&amp;quot;~         2            3
##  8 &amp;quot;문재앙\n부실기업\n민노총나라국민은제편이라\n마구처발라주고\n되는기업은\n먼지탈탈털어구속&amp;quot;~         0           11
##  9 &amp;quot;뭘 그리 놀래나.  \n문재앙정부 하는일이 다 그렇치 뭐,,  ㅋ&amp;quot;~         2            0
## 10 &amp;quot;응 문재앙&amp;quot;                                                    0            1
## # ... with 4,573 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;‘문재앙’ 어휘를 포함한 댓글이 수집된 데이터를 살펴보자. (예외처리를 거친) 대략 845일간의 ‘문재앙’ 댓글 전량을 수집하였음에도 4500개 댓글뿐으로, 이는 하루 5개 정도의 댓글만이 ‘문재앙’ 어휘를 사용했음을 뜻한다. 다음 플랫폼 주 이용자의 정치적 성향을 고려하더라도 이는 상당히 적은 양의 댓글 수이므로 독립적인 표본으로서 결과에 반영하기 애매한듯 보이므로 우선은 분석 대상에서 제외하는 것이 나을 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;문재앙-지수-만들기-2-국정-지지도와-초벌-상관-분석&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;문재앙 지수 만들기 (2) 국정 지지도와 초벌 상관 분석&lt;/h2&gt;
&lt;p&gt;이제 수집된 네이버 댓글 데이터와 위키백과의 ‘대통령 지지도’ 항목에 제시된 국정평가 도표 수치를 비교해보자. 대강의 상관관계를 파악하는 데 도움을 줄 것이다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cor(Summary_3[1:119,1:6], wiki[,c(&amp;quot;gallup&amp;quot;, &amp;quot;rlmeter&amp;quot;)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  gallup     rlmeter
## like_all     0.27487891  0.39347760
## dislike_all  0.22859883  0.36233054
## num_all      0.23600060  0.27587070
## like_1      -0.11599185 -0.05721397
## dislike_1    0.03731947  0.11840819
## num_1        0.05650117  0.06989181&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다소 뜻밖에 결과를 알 수 있는데, ‘문재앙’ 어휘 포함 댓글의 수, 좋아요/싫어요 수치보다 전체 댓글 수, 좋아요, 싫어요 수가 다소 높은 상관을 보이는 것으로 드러나기 때문이다. 따라서 크롤링한 요인들을 활용하여 산출식을 정교화해야 높은 상관관계를 얻을 수 있겠다고 생각된다.
이쯤에서 조사기간(2018.2 ~ 2020.05) 내 전체 댓글 추이를 한번 살펴보자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(Summary, aes(x = week, y = num_all)) +
  geom_line() +
  xlab(&amp;quot;조사기간\n(2018년 2월 첫째주 ~ 2020년 5월 셋째주)&amp;quot;)+
  ylab(&amp;quot;네이버 뉴스 전체 댓글 수&amp;quot;)+
  scale_y_continuous(breaks = 100000*c(2:5), labels = c(&amp;quot;200000개&amp;quot;, &amp;quot;300000개&amp;quot;, &amp;quot;400000개&amp;quot;, &amp;quot;500000개&amp;quot;))+
  theme_bw()+
  geom_smooth(method = &amp;quot;loess&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-05-presidential-excitable-speech-analysis-1_files/figure-html/ggplot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;loess 추세선과 함께 살펴보면, 네이버 뉴스창의 (랭킹 배너 일간 조회수 top30 기사 한정) 댓글 수는 꾸준히 감소해 온 것을 알 수 있다. 다만 올해 들어 코로나 사태 영향으로 댓글창이 일시적으로 활발해진 추세도 함께 엿볼 수 있다. 이렇듯 꾸준한 감소세는 앞서 살펴 본 위키백과 항목의 대통령 지지율의 꾸준한 감소와 유사한 패턴을 보이지만, 이 두 가지 현상, 즉 현 대통령의 레임덕과 (이유 모를) 네이버 댓글창의 비활성화가 유의미한 상관관계를 갖는 사회적 현상인지는 의문이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;문재앙-지수-만들기-3-인사이트-파악-후-산출식-수정&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;문재앙 지수 만들기 (3) 인사이트 파악 후 산출식 수정&lt;/h2&gt;
&lt;p&gt;여기서 나아가 다른 어휘들은 어떤 상관관계가 있을지까지 파악해 보기로 했다. 코드는 다음과 같다.
(네이버 서버상의 문제인지 같은 일자에서 계속해서 오류가 발생했다. 따라서 for문을 돌리는 와중에 중간중간 오류 발생 시 예외처리를 하고 코드 실행을 재개해야 한다.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;main_url = &amp;quot;https://news.naver.com&amp;quot;
operator = &amp;quot;/main/ranking/popularDay.nhn?rankingType=popular_day&amp;amp;date=&amp;quot;
datelist = read_xlsx(&amp;quot;datelist.xlsx&amp;quot;, range = cell_cols(&amp;quot;B&amp;quot;)) %&amp;gt;% as_tibble()
# datelist = datelist[774:844, 1]

Summary_3 = tibble()

for (j in 1:nrow(datelist)){
  Summary_2 = tibble()
  Summary_4 = tibble()
  Summary_5 = tibble()
  Summary_6 = tibble()
  date = datelist[j,1]
  doc = read_html(str_c(main_url, operator, date))
  tmp = html_nodes(doc, &amp;#39;dl&amp;#39;) %&amp;gt;% html_nodes(&amp;#39;a&amp;#39;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)
  tic()
  tmp_1 = tibble()
  tmp_2 = tibble()
  tmp_3 = tibble()
  tmp_4 = tibble()
  tmp_5 = tibble()
  for (i in 1:30){
    sub_url = tmp[i]
    tmp_1 = getAllComment(str_c(main_url, sub_url)) %&amp;gt;%
      as_tibble() %&amp;gt;%
      filter(!duplicated(contents)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;), -imageCount)
    
    tmp_2 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문죄인&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_2 = bind_rows(Summary_2, tmp_2)
    
    tmp_3 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;중국몽&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_4 = bind_rows(Summary_4, tmp_3)
    
    tmp_4 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;문슬람&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_5 = bind_rows(Summary_5, tmp_4)
    
    tmp_5 = tmp_1 %&amp;gt;%
      filter(str_detect(contents, &amp;quot;대깨문&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;일베&amp;quot;)) %&amp;gt;%
      filter(!str_detect(contents, &amp;quot;타령&amp;quot;)) %&amp;gt;%
      select(contents, ends_with(&amp;quot;Count&amp;quot;))
    Summary_6 = bind_rows(Summary_6, tmp_5)}
  toc()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(엑셀 스프레드시트로 변수명 변경 및 열 배치 등 간단한 전처리를 했다.)&lt;/p&gt;
&lt;p&gt;나아가, 보다 구체적이고 유의미한 결과 도출을 위해 나는 주 단위 단순 긍정/부정평가 항목 이외에 ‘정치성향별 국정평가’ 항목 및 일 단위 긍정/부정평가 항목 수치까지 수집했다. 방식은 역시 주간집계 PDF 보고서 파일에서 스프레드시트로 일일이 복사+붙여넣기하는 노가다에 가까웠는데, 이 과정을 효율적으로 운용하기 위해서는 여론조사 기관의 간결한 결과 제시가 필요해 보인다.&lt;/p&gt;
&lt;p&gt;자, 이제 우리는 다양한 산출식을 생각해 볼 수 있다. 나는 우선 3가지 산출식 옵션을 생각했는데, &lt;strong&gt;3가지 옵션&lt;/strong&gt;은 다음과 같다.&lt;/p&gt;
&lt;div id=&#34;전체-좋아요-수-전체-좋아요-싫어요-수---문재앙-좋아요-수-문재앙-좋아요-싫어요-수&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1. 전체 좋아요 수 / (전체 좋아요 + 싫어요 수) - 문재앙 좋아요 수 / (문재앙 좋아요 + 싫어요 수)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;좋아요-수-좋아요-싫어요-수&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;2. 좋아요 수 / (좋아요 + 싫어요 수)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;좋아요-싫어요-수-좋아요-수log단어-포함-댓글-수전체-댓글-수&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;3. {(좋아요 + 싫어요 수) / 좋아요 수}*log(단어 포함 댓글 수/전체 댓글 수)&lt;/h4&gt;
&lt;p&gt;한눈에 보기에도 가장 간단한 식은 2번이다. 비하 단어를 포함한 댓글의 주간 좋아요 수와 싫어요 수 합산만 고려하면 된다. 여기에 주간 댓글 좋아요/싫어요 동향을 반영하여 두 수치를 빼면 1번 식이 나오고, 주간 댓글 좋아요/싫어요 동향을 반영하는 대신, 주간 전체 댓글 수 대비 비하 단어 포함 작성된 댓글 수 비율의 가중치를 두면 3번 식이 나온다. 이때 비하 단어 포함 댓글은 전체 댓글에 비해 상당히 적은 비율을 갖고 있기 때문에 이를 고려하여 로그 변환을 해주는 것이 나을 것이라 판단했다.&lt;/p&gt;
&lt;p&gt;댓글 및 좋아요/싫어요 수가 상식적으로 나온다면, 1번과 3번 식은 국정 지지도와 정적 상관을, 2번 식은 부적 상관을 가지게 될 것이다. 정말로 그러한지 확인해볼겸 나는 1차적인 수식 검증을 할 것이다. 5개의 비하 단어와 32개의 기본 국정평가 항목 중 각각이 얼마큼 유의미한 상관관계를 갖는지 확인한다. 160개의 항목 중 유의도 .05를 넘는 항목의 갯수가 크게 낮으면 정확한 지수 산출식이라고 볼 수 없을 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;예시&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;예시&lt;/h4&gt;
&lt;div id=&#34;option-1.&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;Option 1.&lt;/h5&gt;
&lt;div id=&#34;전체-좋아요-수-전체-좋아요-싫어요-수---문재앙-좋아요-수-문재앙-좋아요-싫어요-수-1&#34; class=&#34;section level6&#34;&gt;
&lt;h6&gt;전체 좋아요 수 / (전체 좋아요 + 싫어요 수) - 문재앙 좋아요 수 / (문재앙 좋아요 + 싫어요 수)&lt;/h6&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Summary.df = Summary %&amp;gt;%
  mutate(disaster = like_all/(like_all+dislike_all) - (like_1)/(like_1+dislike_1),
         sinner = like_all/(like_all+dislike_all) - (like_2)/(like_2+dislike_2),
         china = like_all/(like_all+dislike_all) - (like_3)/(like_3+dislike_3),
         islam = like_all/(like_all+dislike_all) - (like_4)/(like_4+dislike_4),
         head = like_all/(like_all+dislike_all) - (like_5)/(like_5+dislike_5)) %&amp;gt;%
  select(week, disaster, sinner, china, islam, head, everything())

Summary.df = full_join(Summary.df, rlmeter_president, by = &amp;quot;week&amp;quot;) %&amp;gt;% 
  full_join(gallup_president, by = &amp;quot;week&amp;quot;) %&amp;gt;%
  select(-week) %&amp;gt;%
  bind_cols(ideo) %&amp;gt;% 
  select(-week)

mySumm = tibble()
for (i in colnames(Summary.df[1:5])){
  for (j in colnames(Summary.df[24:55])){
    formula = as.formula(str_c(&amp;quot;~&amp;quot;,i,&amp;quot;+&amp;quot;,j))
   myCorr = cor.test(formula, data = Summary.df) %&amp;gt;% tidy()
   myCorr$word = i
   myCorr$eval = j
    mySumm = bind_rows(myCorr, mySumm)
  }
}
mySumm %&amp;gt;% arrange(p.value) %&amp;gt;%
  select(word, eval, estimate, everything(), -method) %&amp;gt;%
  filter(p.value&amp;lt;.05)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 106 x 9
##    word  eval  estimate statistic  p.value parameter conf.low conf.high
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 disa~ g잘하고~    0.653      8.91 1.46e-14       107    0.530     0.749
##  2 disa~ 매우잘한~    0.636      8.79 1.81e-14       114    0.513     0.733
##  3 disa~ g잘못하~   -0.647     -8.77 3.04e-14       107   -0.744    -0.522
##  4 disa~ 잘한다~    0.627      8.59 5.27e-14       114    0.502     0.726
##  5 disa~ 잘못한다~   -0.626     -8.57 5.78e-14       114   -0.725    -0.501
##  6 sinn~ 진보잘못~   -0.630     -8.58 6.19e-14       112   -0.729    -0.504
##  7 sinn~ 매우잘한~    0.622      8.47 9.67e-14       114    0.495     0.722
##  8 disa~ 진보잘못~   -0.624     -8.45 1.21e-13       112   -0.725    -0.497
##  9 disa~ 중도잘한~    0.620      8.35 1.98e-13       112    0.492     0.721
## 10 disa~ 중도잘못~   -0.619     -8.33 2.23e-13       112   -0.721    -0.490
## # ... with 96 more rows, and 1 more variable: alternative &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# option 2
mySumm %&amp;gt;% arrange(p.value) %&amp;gt;%
  select(word, eval, estimate, everything(), -method) %&amp;gt;%
  filter(p.value&amp;lt;.05)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 108 x 9
##    word  eval  estimate statistic  p.value parameter conf.low conf.high
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 disa~ 잘한다~   -0.668     -9.59 2.54e-16       114   -0.758    -0.553
##  2 disa~ 잘못한다~    0.665      9.50 4.02e-16       114    0.549     0.756
##  3 disa~ 중도잘한~   -0.669     -9.53 4.03e-16       112   -0.760    -0.553
##  4 disa~ 매우잘한~   -0.664     -9.48 4.48e-16       114   -0.755    -0.548
##  5 disa~ 중도잘못~    0.667      9.48 5.20e-16       112    0.551     0.758
##  6 disa~ 보수매우~    0.660      9.30 1.34e-15       112    0.542     0.753
##  7 disa~ 보수잘못~    0.659      9.27 1.61e-15       112    0.540     0.752
##  8 disa~ 중도매우~   -0.658     -9.24 1.87e-15       112   -0.751    -0.539
##  9 disa~ 보수매우~   -0.653     -9.13 3.32e-15       112   -0.747    -0.533
## 10 disa~ g잘하고~   -0.661     -9.12 5.07e-15       107   -0.755    -0.540
## # ... with 98 more rows, and 1 more variable: alternative &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# option 3
mySumm.2 %&amp;gt;% arrange(p.value) %&amp;gt;%
  select(word, eval, estimate, everything(), -method) %&amp;gt;%
  filter(p.value&amp;lt;.05)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 121 x 9
##    word  eval  estimate statistic  p.value parameter conf.low conf.high
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
##  1 head  중도잘못~    0.779      13.1 2.05e-24       112    0.694     0.842
##  2 head  중도잘한~   -0.772     -12.9 8.41e-24       112   -0.837    -0.686
##  3 head  중도매우~    0.765      12.6 3.95e-23       112    0.676     0.832
##  4 head  보수잘못~    0.762      12.5 6.59e-23       112    0.673     0.830
##  5 head  보수매우~    0.761      12.4 8.01e-23       112    0.672     0.829
##  6 head  매우잘못~    0.757      12.4 8.99e-23       114    0.666     0.825
##  7 head  잘못한다~    0.756      12.3 9.72e-23       114    0.666     0.825
##  8 head  보수잘한~   -0.752     -12.1 5.60e-22       112   -0.822    -0.659
##  9 head  잘한다~   -0.737     -11.6 3.91e-21       114   -0.811    -0.641
## 10 head  중도매우~   -0.722     -11.0 1.33e-19       112   -0.799    -0.620
## # ... with 111 more rows, and 1 more variable: alternative &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 코드로 3개의 산출식을 계산했을 때 각각 &lt;strong&gt;106, 108, 121개&lt;/strong&gt;의 유의미한 항목 결과가 나온다. 모름/무응답 항목도 포함된 만큼 세 가지 산출식 모두 다소 유의한 항목 갯수라고 볼 수 있을 듯하다. 2번 산출식에서 전체 댓글 좋아요 주간 동향을 반영한 1번 산출식이 조금 더 유의도가 떨어졌다는 점에서 ‘비하 단어’ 포함 댓글은 전체 댓글의 좋아요 수를 고려하지 않았을 때 더욱 여론의 효과적인 재현 지표로 볼 수 있다는 것을 알 수 있다. 또한 3번 산출식이 정확도가 가장 높아보이는데, 2번과 3번의 scattorplot을 보자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Option 2
par(mfrow = c(2, 2))
plot(Summary.df$disaster, Summary.df.2$잘못한다, main = &amp;quot;문재앙 지수&amp;quot;)
plot(Summary.df$sinner, Summary.df.2$잘못한다, main = &amp;quot;문죄인 지수&amp;quot;)
plot(Summary.df$islam, Summary.df.2$잘못한다, main = &amp;quot;문슬람 지수&amp;quot;)
plot(Summary.df$head, Summary.df.2$잘못한다, main = &amp;quot;대깨문 지수&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-05-presidential-excitable-speech-analysis-1_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Option 3
par(mfrow = c(2, 2))
plot(Summary.df.2$disaster, Summary.df.2$잘못한다, main = &amp;quot;문재앙 지수&amp;quot;)
plot(Summary.df.2$sinner, Summary.df.2$잘못한다, main = &amp;quot;문죄인 지수&amp;quot;)
plot(Summary.df.2$islam, Summary.df.2$잘못한다, main = &amp;quot;문슬람 지수&amp;quot;)
plot(Summary.df.2$head, Summary.df.2$잘못한다, main = &amp;quot;대깨문 지수&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-05-presidential-excitable-speech-analysis-1_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;어떤 지수를 활용할 지는 우리 마음이지만, 나는 가장 단순한 2번 산출식과 estimate가 가장 높은 항목을 도출한 3번 산출식 이 두 가지 지표를 모두 활용해서 각각 시각화해보기로 했다. 본격적인 시각화와 상응하는 주관적 분석에 대해서는 다음 게시물에서 다루도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;(2편에 계속)&lt;/mark&gt;&lt;/p&gt;
&lt;style&gt;
body {
  font-family: NanumGothic;
  fontsize = 8px
}
&lt;/style&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>sotu_text_analysis</title>
      <link>/posts/sotu-text-analysis/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/sotu-text-analysis/</guid>
      <description>


&lt;div id=&#34;도입&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;도입&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;데이터-호출-및-전처리&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;데이터 호출 및 전처리&lt;/h1&gt;
&lt;p&gt;UC Santa Barbara의 ‘The American Presidency project’에서는 매해 단위로 수집한 역대 미국 대통령의 의회 국정연설문을 텍스트 데이터로 아카이빙하고 있다. ’State of the Union’(SOTU) 데이터셋이 바로 그것인데, 초대 대통령 조지 워싱턴(1789~1797 재임)부터 45대 대통령 도널드 트럼프(2017~)의 구두/서면 연설문이 txt 파일 형태로 정리되어 있다. URL 역시 크롤링하기 간편한 규칙성을 띠고 있어 txt 파일데이터 전량을 손쉽게 크롤링할 수 있다.
URL 링크 접근과 크롤링을 위해 정리된 메타데이터 엑셀 파일과, 정리된 연설문 파일을 불러오는 것부터 시작하자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(tidytext)
library(tm)
library(quanteda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list.files()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stu = read.csv(&amp;quot;STU_address_metadata.csv&amp;quot;,header=T) %&amp;gt;% as_tibble()
head(stu)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 8
##   label href           president  president_no years  title        date   doc_id
##   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt;          &amp;lt;fct&amp;gt;      &amp;lt;fct&amp;gt;        &amp;lt;fct&amp;gt;  &amp;lt;fct&amp;gt;        &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt;
## 1 2017  https://www.p~ Donald J.~ 45th         2017 ~ Address Bef~ Febru~      1
## 2 2018  https://www.p~ Donald J.~ 45th         2017 ~ Address Bef~ Janua~      2
## 3 2019  https://www.p~ Donald J.~ 45th         2017 ~ Address Bef~ Febru~      3
## 4 2020  https://www.p~ Donald J.~ 45th         2017 ~ Address Bef~ Febru~      4
## 5 2013  https://www.p~ Barack Ob~ 44th         2009 ~ Address Bef~ Febru~      5
## 6 2014  https://www.p~ Barack Ob~ 44th         2009 ~ Address Bef~ Janua~      6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이번 텍스트 데이터 전처리는 tidytext 패키지의 unnest_tokens() 함수를 이용한다. 연설문 텍스트 파일을 tibble 형태로 불러온 후, 연결된 문장을 단어별로 구획해보자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doc_1 = read_lines(&amp;quot;doc_1.txt&amp;quot;) %&amp;gt;% as_tibble() %&amp;gt;% 
  unnest_tokens(words, value, token=&amp;quot;words&amp;quot;)

head(doc_1, n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 1
##    words    
##    &amp;lt;chr&amp;gt;    
##  1 thank    
##  2 you      
##  3 very     
##  4 much     
##  5 mr       
##  6 speaker  
##  7 mr       
##  8 vice     
##  9 president
## 10 members&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;평균-단어-수-계산&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;평균 단어 수 계산&lt;/h1&gt;
&lt;p&gt;보기와 같이 띄어쓰기를 기준으로 한 어절 단위로 연설문이 처리되었음을 알 수 있다. 이제 우리는 해당 텍스트 데이터의 기본적인 분석에 착수할 수 있다. 우선 연설문당 평균 단어수를 계산해보자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp = stu %&amp;gt;% as_tibble() %&amp;gt;%
  select(president, doc_id, president_no) %&amp;gt;%
  arrange(doc_id)

wnum = list()
for (i in 1:max(tmp$doc_id)){
  doc_n = read_lines(str_c(&amp;quot;doc_&amp;quot;, as.character(i),&amp;quot;.txt&amp;quot;)) %&amp;gt;% as_tibble %&amp;gt;%
    unnest_tokens(words, value, token = &amp;quot;words&amp;quot;)
  wnum = bind_rows(wnum, count(doc_n))
}
anyNA(cbind(tmp, wnum))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A1 = cbind(tmp, wnum) %&amp;gt;% as_tibble

meanword = list()
mw = list()
pname = list()
tmpname = list()
for (i in 1:42){
mw = mean(A1$n[A1$president == unique(A1$president)[i]])
meanword[[i]] = mw
tmpname = as.character(unique(A1$president)[i])
pname[[i]] = tmpname
}
a = as.data.frame(cbind(meanword, pname))
a = a[nrow(a):1,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이때 22대, 24대 대통령은 ’Grover Cleveland’로, 연속 연임 대통령이 아닌 유일한 2선 대통령이므로 별도의 전처리를 거쳐야 한다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(mean(A1$n[A1$president_no == &amp;quot;22nd&amp;quot;]),0) # 22대 대통령 재임시절 Cleveland&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13401&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;round(mean(A1$n[A1$president_no == &amp;quot;24th&amp;quot;]),0) # 24대 대통령 재임시절 Cleveland&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14652&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a$meanword[21] == as.numeric(a$meanword[a$pname == &amp;quot;Grover Cleveland&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;b = round(as.numeric(a$meanword[-21])) %&amp;gt;% as_tibble()
c = b[1:19,]
c[20:22, ] = c(13401, 13668, 14652)
c[23:43,] = b[21:41,]&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;인칭대명사-사용-빈도-계산&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;인칭대명사 사용 빈도 계산&lt;/h2&gt;
&lt;p&gt;1~3인칭 단/복수 인칭대명사의 빈도 역시 우리에게 많은 것을 알려줄 수 있다. 대통령별 각 대명사의 사용 빈도를 알아보자. 이때 unnest_token() 함수로 구분된 어절은 모두 소문자로 시작하므로 결측을 배제하기 위한 별도의 전처리가 필요 없다. 대명사 종류별 수집할 어휘는 다음과 같다. (2인칭의 경우 단/복수 형태의 구분이 없으므로 함께 고려한다.)&lt;/p&gt;
&lt;p&gt;1인칭 단수 : i, my, me, mine
1인칭 복수 : we, us, our, ours
2인칭 단수/복수 : you, your, yours
3인칭 단수 : he, she, his, her, him
3인칭 복수 : they, their, them, theirs&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp_2 = tibble()
for (i in 1:max(tmp$doc_id)){
  doc_n = read_lines(str_c(&amp;quot;doc_&amp;quot;,as.character(i),&amp;quot;.txt&amp;quot;)) %&amp;gt;% as_tibble %&amp;gt;%
    unnest_tokens(words, value, token = &amp;quot;words&amp;quot;)
  tmp_2[i,1] = nrow(doc_n)
  tmp_2[i,2] = sum(length(doc_n$words[doc_n$words == &amp;quot;i&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;my&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;me&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;mine&amp;quot;]))
  tmp_2[i,3] = sum(length(doc_n$words[doc_n$words == &amp;quot;we&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;our&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;us&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;ours&amp;quot;]))
  tmp_2[i,4] = sum(length(doc_n$words[doc_n$words == &amp;quot;you&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;your&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;yours&amp;quot;]))
  tmp_2[i,5] = sum(length(doc_n$words[doc_n$words == &amp;quot;he&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;she&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;his&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;her&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;him&amp;quot;]))
  tmp_2[i,6] = sum(length(doc_n$words[doc_n$words == &amp;quot;they&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;their&amp;quot;]),
  length(doc_n$words[doc_n$words == &amp;quot;them&amp;quot;]), length(doc_n$words[doc_n$words == &amp;quot;theirs&amp;quot;]))
}
A2 = inner_join(A1, tmp_2, c(&amp;quot;n&amp;quot;=&amp;quot;...1&amp;quot;)) %&amp;gt;% unique()

head(A2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 9
##   president       doc_id president_no     n  ...2  ...3  ...4  ...5  ...6
##   &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1 Donald J. Trump      1 45th          5096    54   237    29    29    60
## 2 Donald J. Trump      2 45th          5926    51   253    52    62    80
## 3 Donald J. Trump      3 45th          5798    63   230    47    42    47
## 4 Donald J. Trump      4 45th          6387    81   199    91    65    33
## 5 Barack Obama         5 44th          6897    46   299    22    33    69
## 6 Barack Obama         6 44th          7114    74   235    30    56    71&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A2_1 = tibble()
A2_1 = A2 %&amp;gt;%
  mutate(...2 = 100*...2/n,
         ...3 = 100*...3/n,
         ...4 = 100*...4/n,
         ...5 = 100*...5/n,
         ...6 = 100*...6/n)

A2_2 = tibble()
for (i in 1:42){
  A2_2[i,1] = unique(A2_1$president)[i]
  A2_2[i,2] = round(mean(A2_1$n[A2_1$president == unique(A2_1$president)[i]]),0)
  A2_2[i,3] = round(mean(A2_1$...2[A2_1$president == unique(A2_1$president)[i]]),2)
  A2_2[i,4] = round(mean(A2_1$...3[A2_1$president == unique(A2_1$president)[i]]),2)
  A2_2[i,5] = round(mean(A2_1$...4[A2_1$president == unique(A2_1$president)[i]]),2)
  A2_2[i,6] = round(mean(A2_1$...5[A2_1$president == unique(A2_1$president)[i]]),2)
  A2_2[i,7] = round(mean(A2_1$...6[A2_1$president == unique(A2_1$president)[i]]),2)
  } 
A2_2[22,] ## Grover Cleveland
A2_2 = A2_2[-22,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A2_2 %&amp;gt;%
  mutate(rown = row_number()) %&amp;gt;% arrange(desc(rown)) %&amp;gt;%
  rename(&amp;quot;president&amp;quot; = ...1, &amp;quot;totalwords&amp;quot; = ...2, &amp;quot;I&amp;quot; = ...3, &amp;quot;we&amp;quot; = ...4, &amp;quot;you&amp;quot; = ...5, &amp;quot;he/she&amp;quot; = ...6,          &amp;quot;they&amp;quot; = ...7)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 41 x 8
##    president         totalwords     I    we   you `he/she`  they  rown
##    &amp;lt;fct&amp;gt;                  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
##  1 George Washington       2082 1.04   1.25  0.83     0.17  1.18    41
##  2 John Adams              1789 0.9    1.81  0.56     0.31  1.16    40
##  3 Thomas Jefferson        2584 0.47   2.4   0.53     0.2   1.77    39
##  4 James Madison           2711 0.34   1.38  0.17     0.51  0.98    38
##  5 James Monroe            5290 0.32   1.25  0.12     0.36  1.19    37
##  6 John Quincy Adams       7774 0.18   1.15  0.1      0.32  1.28    36
##  7 Andrew Jackson         11273 0.84   1.32  0.27     0.37  1.11    35
##  8 Martin van Buren       11365 0.56   0.83  0.23     0.16  1.34    34
##  9 John Tyler              8517 0.570  0.73  0.32     0.45  0.75    33
## 10 James K. Polk          18054 0.39   1.28  0.12     0.84  1.25    32
## # ... with 31 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;시각화&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;시각화&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;대통령별-평균-단어-수-시각화&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;대통령별 평균 단어 수 시각화&lt;/h1&gt;
&lt;p&gt;우선 처음에 구한 대통령별 연설문 평균 단어 수를 시각화해보자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A2_3 = tibble()
for (i in 0:42){
  A2_3[i+1,1] = unique(A2_1$president_no)[43-i]
  A2_3[i+1,2] = unique(A2_1$president)[43-i]}
for (i in 1:19){
A2_3[c(i,i+1),2] = A2_3[c(i+1, i),2]}
A2_3[20,2] = unique(A2_1$president)[22]

A3_1 = bind_cols(A2_3, c)
A3_1 = A3_1 %&amp;gt;%
  rename(&amp;quot;president_no&amp;quot; = ...1, &amp;quot;president&amp;quot; = ...2) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A3_1 = A3_1 %&amp;gt;% 
  mutate(president_no = str_extract(president_no,&amp;quot;[[:digit:]]{1,2}&amp;quot;),
         president_no = as.numeric(president_no))

A3_1 %&amp;gt;%
  ggplot(aes(x = 46-president_no, y = value)) +
  geom_point(size = 2) +
  geom_line() +
  labs(x=&amp;quot;President of the United States&amp;quot;,
       y=&amp;quot;Average number of words addressed&amp;quot;) +
  ylim(c(1000,25000)) +
  scale_x_continuous(breaks=46-A3_1$president_no,
                     labels=A3_1$president) +
  theme(axis.text.x.bottom = element_text(angle = 45)) +
  theme_light()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-02-sotu-text-analysis_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;이때, 대통령별 변화량에 주목하기보다 시대 변화에 따른 추이를 보고 싶다면 축을 세로로 돌리면 좀 더 보기 편할 것이다. ggplot 패키지의 coord_flip() 함수를 이용하면 된다. 추가적으로 추세선과 함께 그래프를 보면 전반적인 추이를 검토하기 더욱 편할 것이다. 이때 추세선은 전반적이고 유동적인 추이를 시각화하여 제공하고자 함이 주 사용목적이므로 geom_smooth(method = ‘loess’)를 이용하자.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A3_1 %&amp;gt;%
  ggplot(aes(x = 46-president_no, y = value)) +
  geom_point(size = 2) +
  geom_line() +
  geom_smooth() +
  labs(x=&amp;quot;President of the United States&amp;quot;,
       y=&amp;quot;Average number of words addressed&amp;quot;) +
  ylim(c(1000,25000)) +
  scale_x_continuous(breaks=46-A3_1$president_no,
                     labels=A3_1$president) +
  coord_flip() +
  theme_light()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-02-sotu-text-analysis_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;인칭대명사-시각화&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;인칭대명사 시각화&lt;/h1&gt;
&lt;p&gt;이번엔 인칭대명사를 시각화해보자. 먼저 1인칭 복수대명사(‘우리’)의 대통령별 사용빈도를 살펴보자. 전반적인 그래프와 코드는 앞서 평균 단어 수에 사용한 방식과 동일하다.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A4_1 = full_join(A3_1, A2_2, by = c(&amp;quot;value&amp;quot; = &amp;quot;...2&amp;quot;))
A2 = A2 %&amp;gt;% 
  mutate(A2_num = as.numeric(str_extract(A2$president_no,&amp;quot;[[:digit:]]{1,2}&amp;quot;)))

for (i in 1:43){
  A4_1[i,10] = sum(A2$...3[A2$A2_num == unique(A4_1$president_no)[i]])
}

A4_1 = A4_1[,c(1,2,3,10)] %&amp;gt;% rename(&amp;#39;p1_plural&amp;#39;= ...10)
A4_1 %&amp;gt;%
  ggplot(aes(x = 46-president_no, y = p1_plural)) +
  geom_point(size = 2) +
  geom_line() +
  geom_smooth() +
  labs(x=&amp;quot;President of the United States&amp;quot;,
       y=&amp;quot;Average number of 1P Plural form words addressed&amp;quot;) +
  ylim(c(0,3500)) +
  scale_x_continuous(breaks=46-A3_1$president_no,
                     labels=A3_1$president) +
  coord_flip() +
  theme_light()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using method = &amp;#39;loess&amp;#39; and formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-02-sotu-text-analysis_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;우리는 여기서 시대에 따른 ‘우리’ 어휘 사용의 일정한 경향성을 파악할 수 있다. 다른 인칭대명사들의 경우에도 동일할까?&lt;/p&gt;
&lt;div id=&#34;주관적-해석&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;주관적 해석&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;마무리&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;마무리&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&#34;r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Markdown&lt;/h2&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you click the &lt;strong&gt;Knit&lt;/strong&gt; button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Including Plots&lt;/h2&gt;
&lt;p&gt;You can also embed plots, for example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/posts/2020-06-02-sotu-text-analysis_files/figure-html/pressure-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;echo = FALSE&lt;/code&gt; parameter was added to the code chunk to prevent printing of the R code that generated the plot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>/posts/style-guide/</link>
      <pubDate>Tue, 14 Nov 2017 10:57:55 -0500</pubDate>
      
      <guid>/posts/style-guide/</guid>
      <description>&lt;h1 id=&#34;headings&#34;&gt;Headings&lt;/h1&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;Heading 1&lt;/h1&gt;
&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;
&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;
&lt;h4 id=&#34;heading-4&#34;&gt;Heading 4&lt;/h4&gt;
&lt;h5 id=&#34;heading-5&#34;&gt;Heading 5&lt;/h5&gt;
&lt;h6 id=&#34;heading-6&#34;&gt;Heading 6&lt;/h6&gt;
&lt;hr&gt;
&lt;h1 id=&#34;headings-with-text&#34;&gt;Headings with Text&lt;/h1&gt;
&lt;h1 id=&#34;heading-1-1&#34;&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;h2 id=&#34;heading-2-1&#34;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;h3 id=&#34;heading-3-1&#34;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;h4 id=&#34;heading-4-1&#34;&gt;Heading 4&lt;/h4&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;h5 id=&#34;heading-5-1&#34;&gt;Heading 5&lt;/h5&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;h6 id=&#34;heading-6-1&#34;&gt;Heading 6&lt;/h6&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;block-elements&#34;&gt;Block Elements&lt;/h1&gt;
&lt;h2 id=&#34;paragraphs-and-images&#34;&gt;Paragraphs and Images&lt;/h2&gt;
&lt;p&gt;Moinsen! Der kess 🦄 Lichtspieltheater. Kittchen und Schwedenfilm krakelen blümerant Narr. Das flügge Personenvereinzelungsanlage dengeln. Kleintierzuchtverein und Naschkatze meucheln adrett Himmelfahrtskommando. Der gebeutelt Personenvereinzelungsanlage. Der butterweich Scharlatan. Der gemach Kokolores. Haderlump und Waldschrat abkupfern hanebüchen Lump. Der hochgestochen Stümper. Das Trinkhalle abkupfern der bierernst Eisbein. Die Lametta stibitzen der töricht Prahlhans. Die altbacken Himmelfahrtskommando. Kerbholz und Schürzenjäger erquicken garstig Schlachtschüssel. Jungfer und Herrengedeck auftakeln pompös Schnitzel. Ach du liebes Lottchen!&lt;/p&gt;
&lt;p&gt;Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://placehold.it/350x150&#34; alt=&#34;Placeholder Image and Some Alt Text&#34; title=&#34;A title element for this placeholder image.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem.&lt;/p&gt;
&lt;h2 id=&#34;blockquote&#34;&gt;Blockquote&lt;/h2&gt;
&lt;p&gt;This is a standard paragraph. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;This is a blockquote&lt;/strong&gt;. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a standard paragraph. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: the &lt;a href=&#34;http://html5doctor.com/the-figure-figcaption-elements/&#34;&gt;Figure-Figcaption&lt;/a&gt; and &lt;a href=&#34;http://html5doctor.com/the-details-and-summary-elements/&#34;&gt;Details-Summary&lt;/a&gt; elements are not currently supported in markdown.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;text-elements&#34;&gt;Text Elements&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&#34;#&#34;&gt;a element&lt;/a&gt; and &lt;a href=&#34;https://example.com&#34;&gt;external a element&lt;/a&gt; examples&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;abbr element&lt;!-- raw HTML omitted --&gt; and an &lt;!-- raw HTML omitted --&gt;abbr&lt;!-- raw HTML omitted --&gt; element with title examples&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;ACRONYM&lt;!-- raw HTML omitted --&gt; element example&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;b element&lt;/strong&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;cite element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;code element&lt;/code&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;data element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;del&gt;del element&lt;/del&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;dfn element&lt;!-- raw HTML omitted --&gt; and &lt;!-- raw HTML omitted --&gt;dfn element with title&lt;!-- raw HTML omitted --&gt; examples&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;em element&lt;/em&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;i element&lt;/em&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;ins element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;kbd element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;mark element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;q element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;q element &lt;!-- raw HTML omitted --&gt;inside&lt;!-- raw HTML omitted --&gt; a q element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;s element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;samp element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;small element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;span element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;strong element&lt;/strong&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;sub element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;sup element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;time element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;u element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;p&gt;The &lt;!-- raw HTML omitted --&gt;var element&lt;!-- raw HTML omitted --&gt; example&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;monospace--preformatted&#34;&gt;Monospace / Preformatted&lt;/h1&gt;
&lt;p&gt;Code block wrapped in &amp;ldquo;pre&amp;rdquo; and &amp;ldquo;code&amp;rdquo; tags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Loop through Divs using Javascript.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;divs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;divs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;divs&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Monospace Text wrapped in &amp;ldquo;pre&amp;rdquo; tags:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;hr&gt;
&lt;h1 id=&#34;list-types&#34;&gt;List Types&lt;/h1&gt;
&lt;h2 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;List Item 1&lt;/li&gt;
&lt;li&gt;List Item 2&lt;/li&gt;
&lt;li&gt;List Item 3
&lt;ol&gt;
&lt;li&gt;List Item 3.1&lt;/li&gt;
&lt;li&gt;List Item 3.2
&lt;ol&gt;
&lt;li&gt;List Item 3.2.1&lt;/li&gt;
&lt;li&gt;List Item 3.2 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;List Item 3.3&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;List Item 4&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;List Item 1&lt;/li&gt;
&lt;li&gt;List Item 2&lt;/li&gt;
&lt;li&gt;List Item 3
&lt;ul&gt;
&lt;li&gt;List Item 3.1
&lt;ul&gt;
&lt;li&gt;List Item 3.2
&lt;ul&gt;
&lt;li&gt;List Item 3.2.1&lt;/li&gt;
&lt;li&gt;List Item 3.2 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List Item 3.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List Item 4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;definition-list&#34;&gt;Definition List&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;Definition Term 1&lt;/dt&gt;
&lt;dd&gt;Definition Description 1&lt;/dd&gt;
&lt;dt&gt;Definition Term 2&lt;/dt&gt;
&lt;dd&gt;Definition Description 2&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tables&#34;&gt;Tables&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Table Header 1&lt;/th&gt;
&lt;th&gt;Table Header 2&lt;/th&gt;
&lt;th&gt;Table Header 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h1 id=&#34;media-and-form-elements&#34;&gt;Media and Form Elements&lt;/h1&gt;
&lt;p&gt;The remaining sections contain elements that cannot be represented in markdown. Please consult &lt;a href=&#34;https://github.com/bryanbraun/poor-mans-styleguide/blob/gh-pages/index.html&#34;&gt;the HTML version&lt;/a&gt;, to see these elements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Image Style Guide</title>
      <link>/posts/image-content/</link>
      <pubDate>Tue, 14 Nov 2017 08:08:17 -0500</pubDate>
      
      <guid>/posts/image-content/</guid>
      <description>&lt;p&gt;Veniam est eu adipisicing reprehenderit do sit sint elit sint. Tempor laborum ut dolore aliqua. Commodo eu qui sint magna veniam laborum. Ad cupidatat do proident ex veniam amet Lorem. Officia laboris aute fugiat id consequat culpa ullamco labore ea amet ad. Occaecat quis dolor commodo pariatur cillum et id id cupidatat officia.&lt;/p&gt;
&lt;p&gt;Magna incididunt proident cupidatat cupidatat enim consectetur sunt. Ipsum velit aliqua ex ipsum qui labore magna. Ea nisi anim ad culpa Lorem occaecat ex cupidatat duis labore officia dolor.&lt;/p&gt;
&lt;figure class=&#34;full&#34;&gt;
    &lt;img src=&#34;http://via.placeholder.com/600x200&#34;
         alt=&#34;Magna sunt ut ea quis aliqua cupidatat ut quis sit aliqua tempor duis.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Magna sunt ut ea quis aliqua cupidatat ut quis sit aliqua tempor duis.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Aliqua minim esse velit est non. Ea do irure labore aliquip culpa ex ut sunt anim duis irure. Ex adipisicing deserunt do occaecat. Incididunt esse ea tempor fugiat magna.&lt;/p&gt;
&lt;p&gt;Voluptate elit exercitation aliqua ut elit reprehenderit aliquip anim elit laborum laborum. Elit aute sint nisi labore irure in labore culpa. Fugiat velit fugiat ea reprehenderit. Sint minim amet occaecat eu labore reprehenderit pariatur nulla.&lt;/p&gt;
&lt;figure class=&#34;mid&#34;&gt;
    &lt;img src=&#34;http://via.placeholder.com/600x300&#34;
         alt=&#34;Eu cupidatat ex qui do.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Eu cupidatat ex qui do.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In deserunt exercitation Lorem est nulla ullamco enim duis consequat tempor minim. Nostrud cillum ex dolore amet qui mollit do in aliquip consequat eiusmod est dolor officia. Exercitation quis cillum voluptate dolore cillum veniam minim voluptate ullamco voluptate reprehenderit deserunt elit. Et cillum sunt labore ad duis officia aute Lorem incididunt commodo ea.&lt;/p&gt;
&lt;p&gt;Deserunt Lorem aliquip dolor et ut adipisicing nisi esse est dolore irure laborum. Excepteur dolor pariatur excepteur deserunt eiusmod laborum. Ad officia ea magna id ex. Laborum enim proident incididunt quis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://via.placeholder.com/300x400#float-right&#34; alt=&#34;floaty mcboaty&#34;&gt;&lt;/p&gt;
&lt;p&gt;Elit culpa ad ex aute ullamco dolor anim do labore. Non ex do eiusmod elit occaecat. Adipisicing mollit commodo fugiat qui Lorem cupidatat laboris consectetur. Anim nostrud ullamco excepteur Lorem aliqua ullamco nisi.&lt;/p&gt;
&lt;p&gt;Dolor adipisicing magna cupidatat consequat commodo est deserunt enim amet nulla pariatur mollit. Cupidatat officia veniam adipisicing laboris et ullamco consequat est nisi cupidatat. Quis id cillum excepteur consectetur aute excepteur ipsum magna. In ex pariatur nostrud ipsum aliqua nisi irure Lorem consectetur incididunt incididunt cillum. Fugiat ea Lorem velit voluptate cillum. Sunt incididunt proident nulla ad minim ullamco nostrud non commodo dolor enim cillum ullamco esse.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://via.placeholder.com/300x400#float-left&#34; alt=&#34;floaty mcboaty&#34;&gt;&lt;/p&gt;
&lt;p&gt;Do pariatur culpa labore dolore nostrud velit nostrud labore adipisicing enim laborum eu eu. Laborum nulla occaecat amet commodo ut velit. Incididunt et officia ex voluptate qui velit amet. Commodo consequat pariatur labore irure id commodo fugiat exercitation incididunt fugiat aliqua ipsum. Enim exercitation quis cillum irure duis nisi ullamco pariatur exercitation cillum amet nostrud aliquip. Adipisicing pariatur incididunt tempor sit pariatur aliquip aliqua pariatur. Eu occaecat fugiat aliqua consectetur velit incididunt nostrud enim.&lt;/p&gt;
&lt;p&gt;Consectetur non dolore duis anim nostrud pariatur. Nisi ad pariatur est fugiat non occaecat excepteur ea amet esse. Id ullamco nisi anim ut eu reprehenderit irure ullamco. Do voluptate dolor est nostrud sit.&lt;/p&gt;
&lt;figure class=&#34;float-right&#34;&gt;
    &lt;img src=&#34;http://via.placeholder.com/300x400&#34;
         alt=&#34;Eu cupidatat ex qui do.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Eu cupidatat ex qui do.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Irure anim officia nostrud ad veniam reprehenderit incididunt id elit eu id sint ea laboris. Irure esse sit dolore enim nulla consequat esse id esse. Anim consequat reprehenderit incididunt sit. Incididunt incididunt eu ullamco excepteur sit qui id reprehenderit cillum eiusmod velit elit adipisicing. Pariatur et cupidatat quis sint ipsum est non. Anim sit labore ut minim id sint eu incididunt exercitation laborum laborum anim.&lt;/p&gt;
&lt;p&gt;Sit id et irure consectetur veniam do eiusmod. Exercitation veniam labore proident laborum commodo esse culpa laboris ex laboris fugiat. Sunt ut amet tempor eiusmod exercitation laboris in qui tempor mollit culpa mollit. Eu sint consequat consectetur laboris amet dolore do labore ipsum dolor ipsum fugiat. Qui deserunt cillum nostrud dolore tempor reprehenderit reprehenderit reprehenderit.&lt;/p&gt;
&lt;figure class=&#34;float&#34;&gt;
    &lt;img src=&#34;http://via.placeholder.com/300x400&#34;
         alt=&#34;Eu cupidatat ex qui do.&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;Eu cupidatat ex qui do.&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Enim anim veniam ea officia. Duis fugiat fugiat exercitation voluptate labore est est aliqua dolor incididunt eiusmod veniam. Reprehenderit sunt aute veniam anim qui sunt irure officia duis non aute labore. Aliqua reprehenderit pariatur reprehenderit voluptate excepteur ut amet sit ut duis. Ea exercitation ex ad ut dolor minim.&lt;/p&gt;
&lt;p&gt;Lorem nostrud aute cillum ut veniam deserunt. Est commodo et id ea. Proident incididunt consequat deserunt sit do est duis. Do sint ullamco sunt cillum duis.&lt;/p&gt;
&lt;p&gt;Officia aliqua occaecat ipsum dolore nostrud aliqua laborum do consequat nostrud. Dolor amet non ad excepteur duis Lorem aliqua aute. Lorem reprehenderit do sit minim magna nostrud Lorem officia duis.&lt;/p&gt;
&lt;p&gt;Ad amet laboris eu qui ipsum eu ut cillum ipsum consectetur mollit nulla aliqua esse. Adipisicing et ad anim ipsum aliqua duis eiusmod. Quis ad in ea eu amet cupidatat sint eiusmod ullamco. Ullamco aliquip Lorem aliqua labore ipsum. Consectetur magna nostrud mollit nulla nostrud duis ipsum. Officia ad nulla culpa exercitation exercitation exercitation duis ipsum laboris.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/2015/07/23/hello-r-markdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/2015/07/23/hello-r-markdown/</guid>
      <description>


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/creating-a-new-theme/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p&gt;
&lt;p&gt;In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## this is a comment
$ echo this is a command
this is a command

## edit the file
$vi foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
$
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;some-definitions&#34;&gt;Some Definitions&lt;/h2&gt;
&lt;p&gt;There are a few concepts that you need to understand before creating a theme.&lt;/p&gt;
&lt;h3 id=&#34;skins&#34;&gt;Skins&lt;/h3&gt;
&lt;p&gt;Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p&gt;
&lt;p&gt;You have two ways to create a skin. The simplest way is to create it in the &lt;code&gt;layouts/&lt;/code&gt; directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code&gt;layouts/&lt;/code&gt; directory so it will always find the skin.&lt;/p&gt;
&lt;p&gt;Your second choice is to create it in a sub-directory of the &lt;code&gt;themes/&lt;/code&gt; directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p&gt;
&lt;p&gt;The difference between creating a skin in &lt;code&gt;layouts/&lt;/code&gt; and creating it in &lt;code&gt;themes/&lt;/code&gt; is very subtle. A skin in &lt;code&gt;layouts/&lt;/code&gt; can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code&gt;themes/&lt;/code&gt;, on the other hand, can be and that makes it easier for other people to use it.&lt;/p&gt;
&lt;p&gt;The rest of this tutorial will call a skin created in the &lt;code&gt;themes/&lt;/code&gt; directory a theme.&lt;/p&gt;
&lt;p&gt;Note that you can use this tutorial to create a skin in the &lt;code&gt;layouts/&lt;/code&gt; directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p&gt;
&lt;h3 id=&#34;the-home-page&#34;&gt;The Home Page&lt;/h3&gt;
&lt;p&gt;The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p&gt;
&lt;h3 id=&#34;site-configuration-file&#34;&gt;Site Configuration File&lt;/h3&gt;
&lt;p&gt;When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p&gt;
&lt;p&gt;Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code&gt;content/&lt;/code&gt; directory and template files in your &lt;code&gt;themes/&lt;/code&gt; directory. It will create HTML files in your &lt;code&gt;public/&lt;/code&gt; directory. You can change this by specifying alternate locations in the configuration file.&lt;/p&gt;
&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;
&lt;p&gt;Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p&gt;
&lt;h4 id=&#34;front-matter&#34;&gt;Front Matter&lt;/h4&gt;
&lt;p&gt;The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code&gt;+++&lt;/code&gt;”, YAML by “&lt;code&gt;---&lt;/code&gt;”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p&gt;
&lt;p&gt;The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p&gt;
&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;
&lt;p&gt;Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p&gt;
&lt;h3 id=&#34;template-files&#34;&gt;Template Files&lt;/h3&gt;
&lt;p&gt;Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p&gt;
&lt;p&gt;There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p&gt;
&lt;p&gt;Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p&gt;
&lt;p&gt;Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p&gt;
&lt;h4 id=&#34;single-template&#34;&gt;Single Template&lt;/h4&gt;
&lt;p&gt;A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p&gt;
&lt;h4 id=&#34;list-template&#34;&gt;List Template&lt;/h4&gt;
&lt;p&gt;A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p&gt;
&lt;p&gt;The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p&gt;
&lt;h4 id=&#34;partial-template&#34;&gt;Partial Template&lt;/h4&gt;
&lt;p&gt;A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-site&#34;&gt;Create a New Site&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Take a look in the content/ directory to confirm that it is empty.&lt;/p&gt;
&lt;p&gt;The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p&gt;
&lt;h3 id=&#34;generate-the-html-for-the-new-site&#34;&gt;Generate the HTML For the New Site&lt;/h3&gt;
&lt;p&gt;Running the &lt;code&gt;hugo&lt;/code&gt; command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &amp;ldquo;&lt;code&gt;--verbose&lt;/code&gt;&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p&gt;
&lt;p&gt;We can verify that the command worked by looking at the directory again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p&gt;
&lt;h3 id=&#34;test-the-new-site&#34;&gt;Test the New Site&lt;/h3&gt;
&lt;p&gt;Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;index.xml
sitemap.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p&gt;
&lt;p&gt;Let’s go back and look at those warnings again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p&gt;
&lt;p&gt;Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p&gt;
&lt;p&gt;I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p&gt;
&lt;p&gt;At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p&gt;
&lt;h2 id=&#34;create-a-new-theme&#34;&gt;Create a New Theme&lt;/h2&gt;
&lt;p&gt;Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p&gt;
&lt;p&gt;All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p&gt;
&lt;h3 id=&#34;create-a-skeleton&#34;&gt;Create a Skeleton&lt;/h3&gt;
&lt;p&gt;Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p&gt;
&lt;p&gt;Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/theme.toml
author = &amp;quot;michael d henderson&amp;quot;
description = &amp;quot;a minimal working template&amp;quot;
license = &amp;quot;MIT&amp;quot;
name = &amp;quot;zafta&amp;quot;
source_repo = &amp;quot;&amp;quot;
tags = [&amp;quot;tags&amp;quot;, &amp;quot;categories&amp;quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;quot;YOUR_NAME_HERE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;update-the-configuration-file-to-use-the-theme&#34;&gt;Update the Configuration File to Use the Theme&lt;/h3&gt;
&lt;p&gt;Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p&gt;
&lt;p&gt;Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseurl = &amp;quot;&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;zafta - totally refreshing&amp;quot;
MetaDataFormat = &amp;quot;toml&amp;quot;
:wq

$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;generate-the-site&#34;&gt;Generate the Site&lt;/h3&gt;
&lt;p&gt;Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo created a home page. This is the file public/index.html.&lt;/li&gt;
&lt;li&gt;Hugo created a css/ directory.&lt;/li&gt;
&lt;li&gt;Hugo created a js/ directory.&lt;/li&gt;
&lt;li&gt;Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;the-home-page-1&#34;&gt;The Home Page&lt;/h4&gt;
&lt;p&gt;Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p&gt;
&lt;p&gt;When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;the-magic-of-static&#34;&gt;The Magic of Static&lt;/h4&gt;
&lt;p&gt;Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p&gt;
&lt;p&gt;Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$ 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-theme-development-cycle&#34;&gt;The Theme Development Cycle&lt;/h2&gt;
&lt;p&gt;When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Purge the public/ directory.&lt;/li&gt;
&lt;li&gt;Run the built in web server in watch mode.&lt;/li&gt;
&lt;li&gt;Open your site in a browser.&lt;/li&gt;
&lt;li&gt;Update the theme.&lt;/li&gt;
&lt;li&gt;Glance at your browser window to see changes.&lt;/li&gt;
&lt;li&gt;Return to step 4.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p&gt;
&lt;p&gt;Check the main Hugo site for information on using Git with Hugo.&lt;/p&gt;
&lt;h3 id=&#34;purge-the-public-directory&#34;&gt;Purge the public/ Directory&lt;/h3&gt;
&lt;p&gt;When generating the site, Hugo will create new files and update existing ones in the &lt;code&gt;public/&lt;/code&gt; directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p&gt;
&lt;p&gt;Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p&gt;
&lt;h3 id=&#34;hugos-watch-option&#34;&gt;Hugo&amp;rsquo;s Watch Option&lt;/h3&gt;
&lt;p&gt;Hugo&amp;rsquo;s &amp;ldquo;&lt;code&gt;--watch&lt;/code&gt;&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p&gt;
&lt;h3 id=&#34;live-reload&#34;&gt;Live Reload&lt;/h3&gt;
&lt;p&gt;Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;development-commands&#34;&gt;Development Commands&lt;/h3&gt;
&lt;p&gt;Use the following commands as the basis for your workflow.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 1 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;update-the-home-page-template&#34;&gt;Update the Home Page Template&lt;/h2&gt;
&lt;p&gt;The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;_default/list.html&lt;/li&gt;
&lt;li&gt;_default/single.html&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p&gt;
&lt;h3 id=&#34;make-a-static-home-page&#34;&gt;Make a Static Home Page&lt;/h3&gt;
&lt;p&gt;Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
&amp;lt;body&amp;gt; 
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt; 
&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt; 
:wq

$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
0 pages created 
0 tags created
0 categories created
in 2 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
&amp;lt;body&amp;gt; 
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;live-reload-1&#34;&gt;Live Reload&lt;/h4&gt;
&lt;p&gt;Note: If you&amp;rsquo;re running the server with the &lt;code&gt;--watch&lt;/code&gt; option, you&amp;rsquo;ll see different content in the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html&amp;gt; 
&amp;lt;body&amp;gt; 
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt; 
&amp;lt;script&amp;gt;document.write(&#39;&amp;lt;script src=&amp;quot;http://&#39; 
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0] 
    + &#39;:1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/&#39; 
        + &#39;script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt; 
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you use &lt;code&gt;--watch&lt;/code&gt;, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p&gt;
&lt;h3 id=&#34;build-a-dynamic-home-page&#34;&gt;Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p&gt;
&lt;h4 id=&#34;create-new-posts&#34;&gt;Create New Posts&lt;/h4&gt;
&lt;p&gt;Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p&gt;
&lt;p&gt;Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}

$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That wasn&amp;rsquo;t very nice, was it?&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;quot;&amp;quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md 
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:54:53-05:00&amp;quot;
title = &amp;quot;first&amp;quot;

+++
my first post

$ cat content/post/second.md 
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:57:09-05:00&amp;quot;
title = &amp;quot;second&amp;quot;

+++
my second post

$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The output says that it created 2 pages. Those are our new posts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p&gt;
&lt;h3 id=&#34;list-and-single-templates&#34;&gt;List and Single Templates&lt;/h3&gt;
&lt;p&gt;In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p&gt;
&lt;p&gt;Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p&gt;
&lt;h3 id=&#34;add-content-to-the-homepage&#34;&gt;Add Content to the Homepage&lt;/h3&gt;
&lt;p&gt;The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;.Title&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p&gt;
&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &#39;*.html&#39; | xargs ls -l 
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  
    &amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
  
    &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
  
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p&gt;
&lt;p&gt;And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p&gt;
&lt;h3 id=&#34;add-content-to-the-posts&#34;&gt;Add Content to the Posts&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p&gt;
&lt;p&gt;Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p&gt;
&lt;p&gt;Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p&gt;
&lt;p&gt;Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p&gt;
&lt;h4 id=&#34;update-the-template-file&#34;&gt;Update the Template File&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/post/second/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p&gt;
&lt;h3 id=&#34;linking-to-content&#34;&gt;Linking to Content&lt;/h3&gt;
&lt;p&gt;The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content 
0 future content 
2 pages created 
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html 
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-a-post-listing&#34;&gt;Create a Post Listing&lt;/h3&gt;
&lt;p&gt;We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p&gt;
&lt;p&gt;We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p&gt;
&lt;h2 id=&#34;creating-top-level-pages&#34;&gt;Creating Top Level Pages&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p&gt;
&lt;p&gt;The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi content/about.md 
+++
title = &amp;quot;about&amp;quot;
description = &amp;quot;about this site&amp;quot;
date = &amp;quot;2014-09-27&amp;quot;
slug = &amp;quot;about time&amp;quot;
+++

## about us

i&#39;m speechless
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify the results.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p&gt;
&lt;p&gt;One other thing. Take a look at the home page.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/theme/&amp;quot;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/about-time/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/second-post/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/first-post/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&#39;&amp;lt;script src=&amp;quot;http://&#39;
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0]
		+ &#39;:1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/&#39;
        + &#39;script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;post&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p&gt;
&lt;p&gt;But, that about page still renders to about-time/index.html.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi config.toml
[permalinks]
	page = &amp;quot;/:title/&amp;quot;
	about = &amp;quot;/:filename/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p&gt;
&lt;h2 id=&#34;sharing-templates&#34;&gt;Sharing Templates&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p&gt;
&lt;p&gt;We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p&gt;
&lt;h3 id=&#34;create-the-header-and-footer-partials&#34;&gt;Create the Header and Footer Partials&lt;/h3&gt;
&lt;p&gt;In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;update-the-home-page-template-to-use-the-partials&#34;&gt;Update the Home Page Template to Use the Partials&lt;/h3&gt;
&lt;p&gt;The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;versus&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both pass in the context.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;post&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &amp;quot;page&amp;quot;) (eq .Type &amp;quot;about&amp;quot;) }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p&gt;
&lt;h3 id=&#34;update-the-default-single-template-to-use-the-partials&#34;&gt;Update the Default Single Template to Use the Partials&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p&gt;
&lt;h2 id=&#34;add-date-published-to-posts&#34;&gt;Add “Date Published” to Posts&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p&gt;
&lt;h3 id=&#34;add-date-published-to-the-template&#34;&gt;Add “Date Published” to the Template&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p&gt;
&lt;p&gt;As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s restore the default single template before we forget.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p&gt;
&lt;h3 id=&#34;dont-repeat-yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/h3&gt;
&lt;p&gt;DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;
&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;
&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;
&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;
&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;
&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;
&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;
&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;
&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ range array }} 
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{range $element := array}} 
    {{ $element }} 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }} 
    {{ $element }} 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;
&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }} 
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;
&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }} 
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;
&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;
&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;
&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is the same as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Could be rewritten as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here 
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;
&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;
&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;
&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;
&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;
&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;
&lt;p&gt;Here is the example front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;
&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;
&lt;p&gt;For instance, you might declare:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;params&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;CopyrightHTML&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;TwitterUser&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spf13&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;SidebarRecentLimit&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/hugoisforlovers/</guid>
      <description>&lt;h2 id=&#34;step-1-install-hugo&#34;&gt;Step 1. Install Hugo&lt;/h2&gt;
&lt;p&gt;Goto &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo releases&lt;/a&gt; and download the
appropriate version for your os and architecture.&lt;/p&gt;
&lt;p&gt;Save it somewhere specific as we will be using it in the next step.&lt;/p&gt;
&lt;p&gt;More complete instructions are available at &lt;a href=&#34;/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-build-the-docs&#34;&gt;Step 2. Build the Docs&lt;/h2&gt;
&lt;p&gt;Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p&gt;
&lt;p&gt;Follow the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;hugo repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go into the repo&lt;/li&gt;
&lt;li&gt;Run hugo in server mode and build the docs&lt;/li&gt;
&lt;li&gt;Open your browser to http://localhost:1313&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Corresponding pseudo commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you&amp;rsquo;ve gotten here, follow along the rest of this page on your local build.&lt;/p&gt;
&lt;h2 id=&#34;step-3-change-the-docs-site&#34;&gt;Step 3. Change the docs site&lt;/h2&gt;
&lt;p&gt;Stop the Hugo process by hitting ctrl+c.&lt;/p&gt;
&lt;p&gt;Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open your &lt;a href=&#34;http://vim.spf13.com&#34;&gt;favorite editor&lt;/a&gt; and change one of the source
content pages. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;. How about changing this very file to &lt;em&gt;fix the typo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Content files are found in &lt;code&gt;docs/content/&lt;/code&gt;. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code&gt;docs/content/overview/quickstart.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Change and save this file.. Notice what happened in your terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Change detected, rebuilding site

&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refresh the browser and observe that the typo is now fixed.&lt;/p&gt;
&lt;p&gt;Notice how quick that was. Try to refresh the site before it&amp;rsquo;s finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p&gt;
&lt;h2 id=&#34;step-4-have-fun&#34;&gt;Step 4. Have fun&lt;/h2&gt;
&lt;p&gt;The best way to learn something is to play with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/migrate-from-jekyll/</guid>
      <description>&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;should become&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;
&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2 id=&#34;set-your-configuration-publish-folder-to-_site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; {
     ..
     &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
     ..
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;
&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;
&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;
&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;
&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;I simply changed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;
&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;
&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;
&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;
&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;
&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>